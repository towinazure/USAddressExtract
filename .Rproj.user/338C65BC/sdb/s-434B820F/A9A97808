{
    "contents" : "rm(list=ls())\nlibrary(USAddressExtract)\nlibrary(dplyr)\nsetwd('C:\\\\Users\\\\Edwin\\\\Desktop\\\\Edwin(10-08-2012)\\\\Work\\\\Auction.com\\\\BayView Public Record Matching')\n\ntarget.addr <- read.csv('FannieMae.csv')\ntarget.addr$new.zip <- NA\n\nzero.to.fill <- 5 - nchar(target.addr$zip)\nfor(i in 1:nrow(target.addr)){\n\n  if(zero.to.fill[i] > 0){\n    target.addr$new.zip[i] <- paste(rep(0, zero.to.fill[i]), target.addr$zip[i], sep = \"\")\n  }else{\n    target.addr$new.zip[i] <- as.character(target.addr$zip[i])\n  }\n\n}\n\ntarget.addr$state <- as.character(target.addr$state)\n\ntarget.addr$county <- as.character(target.addr$county)\ntarget.addr$county <- gsub('\\\\n','', target.addr$county)\n\ntarget.addr$city <- as.character(target.addr$city)\n\ntarget.addr$street <- as.character(target.addr$street)\ntarget.addr$street <- gsub('\\\\n','', target.addr$street)\n\ntarget.addr$property.type <- as.character(target.addr$property.type)\ntarget.addr$property.type <- gsub('\\\\n','', target.addr$property.type)\n\ntarget.addr$Address <- paste(target.addr$street,  target.addr$state, target.addr$new.zip)\ntarget.addr$Address <- gsub('\\\\s$', '', target.addr$Address) #Trim the end\n\n##testing\n# setwd('C:\\\\Users\\\\Edwin\\\\Desktop\\\\Edwin(10-08-2012)\\\\Work\\\\Edwin R\\\\USAddressExtract\\\\USAddressExtract\\\\R')\n# source('ExtractAddressFields.R')\n\ntarget.addr.new <- target.addr[, c('row_id', 'Address')]\ntarget.addr.new$Zip             <- NA\ntarget.addr.new$State           <- NA\ntarget.addr.new$Nbr             <- NA\ntarget.addr.new$St.Suf          <- NA\ntarget.addr.new$St.Dr           <- NA\ntarget.addr.new$St.Name         <- NA\ntarget.addr.new$Unit.Suf        <- NA\ntarget.addr.new$Unit            <- NA\ntarget.addr.new$Process.Status  <- NA\n\nfor(i in 1:nrow(target.addr)){\n\n  x <- ExtractAddrressFields(target.addr$Address[i])\n\n  if(!is.null(x)){\n\n    target.addr.new$Zip[i]             <- x$Zip\n    target.addr.new$State[i]           <- x$State\n    target.addr.new$Nbr[i]             <- x$Nbr\n    target.addr.new$St.Suf[i]          <- x$St.Suf\n    target.addr.new$St.Dr[i]           <- x$St.Dr\n    target.addr.new$St.Name[i]         <- x$St.Name\n    target.addr.new$Unit.Suf[i]        <- x$Unit.Suf\n    target.addr.new$Unit[i]            <- x$Unit\n    target.addr.new$Process.Status[i]  <- x$Status\n\n  }\n\n}\n\ntarget.addr.new.missed <- target.addr.new %>% filter(Process.Status == 'Cannot find street suffix properly')\n\naddr.database <- read.csv('EDW_Data.csv', header = TRUE, na.strings = 'Unknown')\nnames(addr.database) <- gsub('[^a-z]\\\\.\\\\.', \"\", x = names(addr.database) ) #getting rid of crazy naming\n\naddr.database <- addr.database[grepl('Fannie Mae', addr.database$SellerName, ignore.case = TRUE),]\naddr.database$ParsedAddress <- as.character(addr.database$ParsedAddress)\naddr.database$ParsedSuite <- as.character(addr.database$ParsedSuite)\naddr.database$SellerName <- as.character(addr.database$SellerName)\naddr.database$AuctionStatus <- as.character(addr.database$AuctionStatus)\naddr.database$AuctionDate <- as.Date(as.character(addr.database$AuctionDate), format = '%Y-%m-%d')\naddr.database$PropertyState <- as.character(addr.database$PropertyState)\naddr.database$Reserve <- as.numeric(as.character(addr.database$Reserve))\naddr.database$ParsedCity <- as.character(addr.database$ParsedCity)\n\naddr.database$new.zip[addr.database$ParsedZip <= 9999] <-\n  as.character(paste(0, addr.database$ParsedZip[addr.database$ParsedZip <= 9999] , sep=\"\"))\naddr.database$new.zip[addr.database$ParsedZip <= 999] <-\n  as.character(paste(0,0, addr.database$ParsedZip[addr.database$ParsedZip <= 999] , sep=\"\"))\naddr.database$new.zip[addr.database$ParsedZip > 9999] <- as.character((addr.database$ParsedZip[addr.database$ParsedZip > 9999]))\n\naddr.database$Address <- paste(addr.database$ParsedAddress, addr.database$ParsedSuite, addr.database$PropertyState, addr.database$new.zip)\naddr.database$Address <- gsub('\\\\s$', '', addr.database$Address) #Trim the end\n\naddr.database.new <- addr.database[, c('GlobalPropertyId', 'SystemAuctionId', 'Address', 'IsSold', 'Reserve', 'AuctionDate', 'AuctionStatus')]\naddr.database.new$Zip             <- NA\naddr.database.new$State           <- NA\naddr.database.new$Nbr             <- NA\naddr.database.new$St.Suf          <- NA\naddr.database.new$St.Dr           <- NA\naddr.database.new$St.Name         <- NA\naddr.database.new$Unit.Suf        <- NA\naddr.database.new$Unit            <- NA\naddr.database.new$Process.Status  <- NA\n\n# write.csv(x = addr.database.new, file = 'edw_test_data.csv', row.names = FALSE)\n# write.csv(x = target.addr.new, file = 'test_data.csv', row.names = FALSE)\n\nfor(i in 1:nrow(addr.database.new)){\n\n  x <- ExtractAddrressFields(addr.database.new$Address[i])\n\n  if(!is.null(x)){\n\n    addr.database.new$Zip[i]             <- x$Zip\n    addr.database.new$State[i]           <- x$State\n    addr.database.new$Nbr[i]             <- x$Nbr\n    addr.database.new$St.Suf[i]          <- x$St.Suf\n    addr.database.new$St.Dr[i]           <- x$St.Dr\n    addr.database.new$St.Name[i]         <- x$St.Name\n    addr.database.new$Unit.Suf[i]        <- x$Unit.Suf\n    addr.database.new$Unit[i]            <- x$Unit\n    addr.database.new$Process.Status[i]  <- x$Status\n\n  }\n}\n\nout.set <- addr.database.new\nout.set$match.row_id <- NA\nstart.time <- Sys.time()\n\nfor(i in 1:nrow(addr.database.new)){\n\n  k <- which((target.addr.new$Zip == addr.database.new$Zip[i]) &\n             (target.addr.new$Nbr == addr.database.new$Nbr[i]) &\n             # (target.addr.new$St.Name == addr.database.new$St.Name[i]))\n      unlist(lapply(target.addr.new$St.Name, FUN = grepl, addr.database.new$St.Name[i], ignore.case = TRUE)))\n\n  if(length(k) > 0){\n\n    out.set$match.row_id[i] <- toString(target.addr$row_id[k], sep = ',')\n\n  }\n\n  if(i %% 10 == 0 ){\n\n    current.time <- Sys.time()\n    elapsed <- round(as.numeric(difftime(current.time, start.time, units = \"mins\")), 1)\n    print(paste(\"Processed\", i, \"rows,\", elapsed,  \"minutes elapsed.\", sep = \" \"))\n\n  }\n\n}\n\nout.matched.unsold.set <- out.set %>% filter(!is.na(match.row_id) & IsSold == 0)\n\n\nwrite.csv(out.set, 'output.csv',row.names = FALSE)\n\n",
    "created" : 1440544214858.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "3763192424",
    "id" : "A9A97808",
    "lastKnownWriteTime" : 1440646708,
    "path" : "C:/Users/Edwin/Desktop/Edwin(10-08-2012)/Work/Auction.com/BayView Public Record Matching/address_matching_20150825.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}