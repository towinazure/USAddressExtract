{
    "contents" : "---\ntitle: \"Users Behavior Exploration\"\nauthor: \"Edwin Ng\"\ndate: Tuesday, April 21, 2015\ngeometry: margin=0.3in\noutput: \n  pdf_document:\n    toc: true\n    fig_width: 12\n    fig_height: 6\n    keep_tex: true\n---\n\n# Objective\n\nIn this analysis, we want to explore insights given by the behavioral metrics in asset and user level such as page views, saves as favorite, registrations and bidding participation.\n\nWe will first provide an overview on how the metrics change overtime in asset level while auction is approaching.\n\nThen we will examine their predicting power on auction sell through rate on different time spot.  \n\nAlso, we will examine features in user level such as historical attendance, individual page views, favorite mark etc.\n\nIt is well known that number of bidders are highly correlated to the sell through rate.  However, it is not practical because we would not know the actual number of bidders until the auction start which only give us limited time frame to make this model feasible. Hence, we may want to analyze the quality of a user/visitor being a bidder, which ultimately will impact the chance of the asset sold. \n\n```{r libraries, echo = FALSE, message=FALSE, results='hide', cache=FALSE}\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(ggplot2)\nlibrary(scales)\nlibrary(ggthemes)\nlibrary(reshape2)\nlibrary(xtable)\nlibrary(knitr)\nlibrary(glmnet)\noptions(scipen = 7, digits = 3)\n\nresearch.start <- as.Date('2015-01-15', format = '%Y-%m-%d')\nresearch.end   <- as.Date('2015-03-15', format = '%Y-%m-%d')\n```\n\n# Asset Level Behovarial Metrics\n\n## Metrics Setup\n\nThe data backing the graphs in this section are extracted by the following criteria:\n\n1. Date: 1/15/2015 - 3/15/2015(Some of them used 2/15/2015 - 3/15/2015 due to capacity in __R__)\n2. Product: REO and Day 1 REO\n3. Non pre-sale-sold\n\nThe \"sell through\" rate defined here is using the \"IsSold\" column under _factauction_ which means the _soft sell_.\n\n## Overview on User Level Metrics Along Day from Auction\n\n```{r AuctionBaseData, echo = FALSE, message=FALSE, results='hide', cache=TRUE}\nsetwd('C:\\\\Users\\\\edng\\\\Desktop\\\\Projects\\\\Programming\\\\R\\\\Registrants Research\\\\Data')\n###################################################\n##  Auction Asset Data\n###################################################\n\nauc.stat <- read.csv('FactAuction_Statistics_20140901_to_now.csv', na.strings = \"NULL\")\nnames(auc.stat) <- gsub('[^a-z]\\\\.\\\\.', \"\", x = names(auc.stat) ) #getting rid of crazy naming\nauc.stat$BidStartDate  <- as.Date(as.character(auc.stat$BidStartDate), format = '%m/%d/%Y')\nauc.stat$BidEndDate    <- as.Date(as.character(auc.stat$BidEndDate), format  = '%m/%d/%Y')\nauc.stat$WinningBidDate<- as.Date(as.character(auc.stat$WinningBidDate), format  = '%m/%d/%Y')\n\nauc.stat$WinningBid[is.na(auc.stat$WinningBid)] <- 0 \n\nauc.stat <- subset(auc.stat, BidEndDate >= research.start & BidEndDate <= research.end)\nauc.base <- auc.stat %>% select(AuctionId, PropertyId) ## base used to filter the auction\n\n```\n\n```{r BehaviourData, echo = FALSE, message=FALSE, results='hide', cache=TRUE}\n\n###################################################\n##  Read and Tidy Up All Base Data\n###################################################\n\nsetwd('C:\\\\Users\\\\edng\\\\Desktop\\\\Projects\\\\Programming\\\\R\\\\Registrants Research\\\\Data')\n\n###################################################\n##  Registrants Data\n###################################################\n\nregs.dat1 <- read.csv('Reg201501.csv')\nregs.dat1 <- regs.dat1 %>% inner_join(auc.base, by = c('AuctionId','PropertyId'))\n\nregs.dat2 <- read.csv('Reg201502.csv')\nregs.dat2 <- regs.dat2 %>% inner_join(auc.base, by = c('AuctionId','PropertyId'))\n\nregs.dat3 <- read.csv('Reg20150301_to_Reg20150315.csv')\nregs.dat3 <- regs.dat3 %>% inner_join(auc.base, by = c('AuctionId','PropertyId'))\n\nregs.dat <- rbind(regs.dat1, regs.dat2, regs.dat3)\nrm(regs.dat1); rm(regs.dat2); rm(regs.dat3);\n\nregs.dat$RegDate     <- as.Date(as.character(regs.dat$RegDate), format  = '%m/%d/%Y')\nregs.dat$BidStartDate <- as.Date(as.character(regs.dat$BidStartDate), format  = '%m/%d/%Y')\nregs.dat$BidEndDate <- as.Date(as.character(regs.dat$BidEndDate), format  = '%m/%d/%Y')\nregs.dat$LastBidDate <- as.Date(as.character(regs.dat$LastBidDate), format  = '%m/%d/%Y')\n\nnames(regs.dat) <- gsub('[^a-z]\\\\.\\\\.', \"\", x = names(regs.dat) ) #getting rid of crazy naming\n\n###################################################\n##  Page View Data\n###################################################\n\npage.views.dat <- read.csv(file = 'UUID_Page_Views_from_20150115_to_20150315.csv')\npage.views.dat$visit.date <- as.Date(as.character(page.views.dat$visit.date), format = '%Y-%m-%d')\npage.views.dat$BidStartDate <- as.Date(as.character(page.views.dat$BidStartDate), format = '%Y-%m-%d')\n\n###################################################\n##  Favorite Saves Data\n###################################################\n\nFav.dat <- read.csv('Favorites_Acty_20140901_to_2014_0315.csv')\nFav.dat$save.date <- as.Date(as.character(Fav.dat$SavedDate), format='%Y-%m-%d')\nFav.dat$SavedDate <- NULL\nnames(Fav.dat) <- gsub('[^a-z]\\\\.\\\\.', \"\", x = names(Fav.dat) ) #getting rid of crazy naming\n\nFav.dat <- Fav.dat %>% inner_join(auc.base, by = c('AuctionId', 'PropertyId'))\nFav.dat$SaveDayFromAuc <- as.numeric(as.character(Fav.dat$SaveDayFromAuc))\n\n####################################################\n##  Aggregating data into daily auction asset level\n####################################################\n\nmin.DaysFromAuc <- -30\nmax.DaysFromAuc <- 3\nl <- max.DaysFromAuc - min.DaysFromAuc + 1\n\nregs.dat       <- subset(regs.dat,       RegDaysFromAuc  >= min.DaysFromAuc & RegDaysFromAuc  <= max.DaysFromAuc)\npage.views.dat <- subset(page.views.dat, VisDayFromAuc   >= min.DaysFromAuc & VisDayFromAuc   <= max.DaysFromAuc)\nFav.dat        <- subset(Fav.dat,        SaveDayFromAuc  >= min.DaysFromAuc & SaveDayFromAuc  <= max.DaysFromAuc)\n\ndaily.regs<- regs.dat %>% \n  group_by(RegDaysFromAuc, AuctionId, PropertyId) %>% summarise(IDOs = sum(IsIDOUser), Non.IDOs = sum(1 - IsIDOUser))\n\ndaily.views<- page.views.dat %>% \n  group_by(VisDayFromAuc, AuctionId, PropertyId) %>% summarise(pdp.views = sum(pdp.views))\n\ndaily.saves<- Fav.dat %>% \n  group_by(SaveDayFromAuc, AuctionId, PropertyId) %>% summarise(fav.saves = n())\n\nnames(daily.regs)[names(daily.regs)       == 'RegDaysFromAuc']     <- 'DaysFromAuc'\nnames(daily.views)[names(daily.views)     == 'VisDayFromAuc']      <- 'DaysFromAuc'\nnames(daily.saves)[names(daily.saves)     == 'SaveDayFromAuc']     <- 'DaysFromAuc'\n\n\nauc.daily.dat <- data.frame(BidEndDate        = rep(auc.stat$BidEndDate, each = l),\n                            AuctionId         = rep(auc.stat$AuctionId, each = l),\n                            PropertyId        = rep(auc.stat$PropertyId, each = l),\n                            IsSold            = rep(auc.stat$IsSold, each = l),\n                            IsPreSaleSold     = rep(auc.stat$IsPreSaleSold, each = l),\n                            PropertyState     = rep(auc.stat$PropertyState, each = l),\n                            ProductType       = rep(auc.stat$ProductType, each = l),\n                            ShellSellerGroup  = rep(auc.stat$ShellSellerGroup, each = l),\n                            DaysFromAuc       = rep(seq(from = min.DaysFromAuc, to = max.DaysFromAuc, by = 1), \n                              nrow(auc.stat)))\n\nauc.daily.dat <- auc.daily.dat %>% \n  left_join(daily.views,   by = c('AuctionId', 'PropertyId', 'DaysFromAuc')) %>%\n  left_join(daily.saves,   by = c('AuctionId', 'PropertyId', 'DaysFromAuc')) %>%\n  left_join(daily.regs,    by = c('AuctionId', 'PropertyId', 'DaysFromAuc')) \n\nauc.daily.dat$IDOs[is.na(auc.daily.dat$IDOs)] <- 0 \nauc.daily.dat$Non.IDOs[is.na(auc.daily.dat$Non.IDOs)] <- 0 \nauc.daily.dat$fav.saves[is.na(auc.daily.dat$fav.saves)] <- 0 \nauc.daily.dat$pdp.views[is.na(auc.daily.dat$pdp.views)] <- 0 \n\nauc.daily.dat <- auc.daily.dat %>% group_by(AuctionId, PropertyId) %>% \n  mutate(cum.IDOs = cumsum(IDOs),  cum.Non.IDOs= cumsum(Non.IDOs), cum.saves = cumsum(fav.saves), cum.views = cumsum(pdp.views))\n\n```\n\n```{r DescriptivePlot, echo = FALSE, message=FALSE, results='hide', cache=TRUE}\n###################################################################################\n##  Descriptive table for Each Metrics\n###################################################################################\n\nauc.daily.sub.dat <- auc.daily.dat %>% filter(ProductType %in% c('REO','Day 1 REO') &  IsPreSaleSold == 0) \n\nviews.summary <- auc.daily.sub.dat %>% group_by(DaysFromAuc, IsSold) %>%\n  summarise(mid.cum.views = median(cum.views), upper.cum.views = quantile(cum.views, 3/4), lower.cum.views = quantile(cum.views, 1/4),\n            sd.cum.views = sd(cum.views))\n\nsaves.summary <- auc.daily.sub.dat %>% group_by(DaysFromAuc, IsSold) %>%\n  summarise(mid.cum.saves = median(cum.saves), upper.cum.saves = quantile(cum.saves, 3/4), lower.cum.saves = quantile(cum.saves, 1/4),\n            sd.cum.saves = sd(cum.saves))\n\n\nregs.summary <- auc.daily.sub.dat %>% group_by(DaysFromAuc, IsSold) %>%\n  summarise(mid.cum.IDOs = median(cum.IDOs), avg.IDOs = mean(IDOs), \n            upper.cum.IDOs = quantile(cum.IDOs, 3/4), lower.cum.IDOs = quantile(cum.IDOs, 1/4),\n            mid.cum.Non.IDOs = median(cum.Non.IDOs), avg.Non.IDOs = mean(IDOs), \n            upper.cum.Non.IDOs = quantile(cum.Non.IDOs, 3/4), lower.cum.Non.IDOs = quantile(cum.Non.IDOs, 1/4))\n\nregs.summary$IsSold <- as.factor(regs.summary$IsSold)\n\nIDOs.plot <- ggplot(data = subset(regs.summary, DaysFromAuc >= min.DaysFromAuc & DaysFromAuc <= max.DaysFromAuc)) + \n  geom_line(aes(y = mid.cum.IDOs, x = DaysFromAuc, colour = IsSold), size = 1.5) +   \n  geom_ribbon(aes(x=DaysFromAuc,  ymin = lower.cum.IDOs , ymax = upper.cum.IDOs, fill = IsSold), alpha = 0.3) +\n  labs(x ='Day from Auction', y = 'Cumulative Number of Registrants', \n       title = 'Total IDO Registrants vs. Day from Auction, REO 1/15/15-3/15/15') +\n  theme(axis.title.x = element_text(size=14), axis.title.y = element_text(size=14), title = element_text(size=18))  + \n  theme(legend.position=\"top\") +\n  scale_x_continuous(breaks= seq(from = min.DaysFromAuc , to = max.DaysFromAuc, by = 1)) +\n  scale_colour_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                      name=\"Property Sold in the Auction?\",\n                      breaks=c(\"0\", \"1\"),\n                      labels=c(\"No\", \"Yes\")) + \n  scale_fill_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                    name=\"Property Sold in the Auction?\",\n                    breaks=c(\"0\", \"1\"),\n                    labels=c(\"No\", \"Yes\"))\n\nNon.IDOs.plot <- ggplot(data = subset(regs.summary, DaysFromAuc >= min.DaysFromAuc & DaysFromAuc <= max.DaysFromAuc)) + \n  geom_line(aes(y = mid.cum.Non.IDOs, x = DaysFromAuc, colour = IsSold), size = 1.5) +   \n  geom_ribbon(aes(x=DaysFromAuc,  ymin = lower.cum.Non.IDOs , ymax = upper.cum.Non.IDOs, fill = IsSold), alpha = 0.3) +\n  labs(x ='Day from Auction', y = 'Cumulative Number of Registrants', \n       title = 'Total Non-IDO Registrants vs. Day from Auction, REO 1/15/15-3/15/15') +\n  theme(axis.title.x = element_text(size=14), axis.title.y = element_text(size=14), title = element_text(size=18))  + \n  theme(legend.position=\"top\") +\n  scale_x_continuous(breaks= seq(from = min.DaysFromAuc , to = max.DaysFromAuc, by = 1)) + \n  scale_colour_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                      name=\"Property Sold in the Auction?\",\n                      breaks=c(\"0\", \"1\"),\n                      labels=c(\"No\", \"Yes\")) + \n  scale_fill_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                    name=\"Property Sold in the Auction?\",\n                    breaks=c(\"0\", \"1\"),\n                    labels=c(\"No\", \"Yes\"))\n\n\n\nviews.summary$IsSold <- as.factor(views.summary$IsSold)\n\npdp.views.plot <- ggplot(data = subset(views.summary, DaysFromAuc >= min.DaysFromAuc & DaysFromAuc <= max.DaysFromAuc)) + \n  geom_line(aes(y = mid.cum.views, x = DaysFromAuc, colour = IsSold), size = 1.5) +  \n  geom_ribbon(aes(x=DaysFromAuc,  ymin=lower.cum.views , ymax = upper.cum.views, fill = IsSold), alpha = 0.3) +\n  #   scale_colour_economist()  +  theme_economist() +\n  labs(x ='Day from Auction', y = 'Cumulative Number of Page Views', \n       title = 'Total Page Views Range vs. Day from Auction, REO 1/15/15-3/15/15') +\n  theme(axis.title.x = element_text(size=14), axis.title.y = element_text(size=14), title = element_text(size=18))  + \n  theme(legend.position=\"top\") +\n  scale_x_continuous(breaks= seq(from = min.DaysFromAuc , to = max.DaysFromAuc, by = 1)) +\n  scale_colour_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                      name=\"Property Sold in the Auction?\",\n                      breaks=c(\"0\", \"1\"),\n                      labels=c(\"No\", \"Yes\")) + \n  scale_fill_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                    name=\"Property Sold in the Auction?\",\n                    breaks=c(\"0\", \"1\"),\n                    labels=c(\"No\", \"Yes\"))\n\nsaves.summary$IsSold <- as.factor(saves.summary$IsSold)\n\nfav.saves.plot <- ggplot(data = subset(saves.summary, DaysFromAuc >= min.DaysFromAuc & DaysFromAuc <= max.DaysFromAuc)) + \n  geom_line(aes(y = mid.cum.saves, x = DaysFromAuc, colour = IsSold), size = 1.5) +  \n  geom_ribbon(aes(x=DaysFromAuc,  ymin = lower.cum.saves , ymax = upper.cum.saves, fill = IsSold), alpha = 0.3) +\n  labs(x ='Day from Auction', y = 'Cumulative Number of Favorite Saves', \n       title = 'Total Favorite Saves vs. Day from Auction, REO 1/15/15-3/15/15') +\n  theme(axis.title.x = element_text(size=14), axis.title.y = element_text(size=14), title = element_text(size=18))  + \n  theme(legend.position=\"top\") +\n  scale_x_continuous(breaks= seq(from = min.DaysFromAuc , to = max.DaysFromAuc, by = 1)) +\n  scale_colour_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                      name=\"Property Sold in the Auction?\",\n                      breaks=c(\"0\", \"1\"),\n                      labels=c(\"No\", \"Yes\")) + \n  scale_fill_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                    name=\"Property Sold in the Auction?\",\n                    breaks=c(\"0\", \"1\"),\n                    labels=c(\"No\", \"Yes\"))\n\npdp.views.plot \nfav.saves.plot \nNon.IDOs.plot\nIDOs.plot\n\nn.sold      <- sum(subset(auc.daily.sub.dat,  DaysFromAuc == 0)$IsSold)\nn.not.sold  <- sum(1 - subset(auc.daily.sub.dat,  DaysFromAuc == 0)$IsSold)\n```\n\n\nTotal number of properties shown above: $`r n.sold + n.not.sold`$\nSold: $`r n.sold`$\nNot Sold: $`r n.not.sold`$ \n\n\\clearpage\n\n## Pre-Sale-Sold Behavioural Metrics\n\n```{r DescriptivePlot_PreSaleSold, echo = FALSE, message=FALSE, results='hide', cache=TRUE}\n\nauc.daily.sub.dat <- auc.daily.dat %>% filter(ProductType %in% c('REO','Day 1 REO') &  IsPreSaleSold == 1) \n\nviews.summary <- auc.daily.sub.dat %>% group_by(DaysFromAuc, IsSold) %>%\n  summarise(mid.cum.views = median(cum.views), upper.cum.views = quantile(cum.views, 3/4), lower.cum.views = quantile(cum.views, 1/4),\n            sd.cum.views = sd(cum.views))\n\nsaves.summary <- auc.daily.sub.dat %>% group_by(DaysFromAuc, IsSold) %>%\n  summarise(mid.cum.saves = median(cum.saves), upper.cum.saves = quantile(cum.saves, 3/4), lower.cum.saves = quantile(cum.saves, 1/4),\n            sd.cum.saves = sd(cum.saves))\n\n\nregs.summary <- auc.daily.sub.dat %>% group_by(DaysFromAuc, IsSold) %>%\n  summarise(mid.cum.IDOs = median(cum.IDOs), avg.IDOs = mean(IDOs), \n            upper.cum.IDOs = quantile(cum.IDOs, 3/4), lower.cum.IDOs = quantile(cum.IDOs, 1/4),\n            mid.cum.Non.IDOs = median(cum.Non.IDOs), avg.Non.IDOs = mean(IDOs), \n            upper.cum.Non.IDOs = quantile(cum.Non.IDOs, 3/4), lower.cum.Non.IDOs = quantile(cum.Non.IDOs, 1/4))\n\nregs.summary$IsSold <- as.factor(regs.summary$IsSold)\n\nIDOs.plot <- ggplot(data = subset(regs.summary, DaysFromAuc >= min.DaysFromAuc & DaysFromAuc <= max.DaysFromAuc)) + \n  geom_line(aes(y = mid.cum.IDOs, x = DaysFromAuc, colour = IsSold), size = 1.5) +   \n  geom_ribbon(aes(x=DaysFromAuc,  ymin = lower.cum.IDOs , ymax = upper.cum.IDOs, fill = IsSold), alpha = 0.3) +\n  labs(x ='Day from Auction', y = 'Cumulative Number of Registrants', \n       title = 'Total IDO Registrants vs. Day from Auction, REO Pre-Sale-Sold 1/15/15-3/15/15') +\n  theme(axis.title.x = element_text(size=14), axis.title.y = element_text(size=14), title = element_text(size=18))  + \n  theme(legend.position=\"top\") +\n  scale_x_continuous(breaks= seq(from = min.DaysFromAuc , to = max.DaysFromAuc, by = 1)) +\n  scale_colour_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                      name=\"Property Sold in the Auction?\",\n                      breaks=c(\"0\", \"1\"),\n                      labels=c(\"No\", \"Yes\")) + \n  scale_fill_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                    name=\"Property Sold in the Auction?\",\n                    breaks=c(\"0\", \"1\"),\n                    labels=c(\"No\", \"Yes\"))\n\nNon.IDOs.plot <- ggplot(data = subset(regs.summary, DaysFromAuc >= min.DaysFromAuc & DaysFromAuc <= max.DaysFromAuc)) + \n  geom_line(aes(y = mid.cum.Non.IDOs, x = DaysFromAuc, colour = IsSold), size = 1.5) +   \n  geom_ribbon(aes(x=DaysFromAuc,  ymin = lower.cum.Non.IDOs , ymax = upper.cum.Non.IDOs, fill = IsSold), alpha = 0.3) +\n  labs(x ='Day from Auction', y = 'Cumulative Number of Registrants', \n       title = 'Total Non-IDO Registrants vs. Day from Auction, REO Pre-Sale-Sold 1/15/15-3/15/15') +\n  theme(axis.title.x = element_text(size=14), axis.title.y = element_text(size=14), title = element_text(size=18))  + \n  theme(legend.position=\"top\") +\n  scale_x_continuous(breaks= seq(from = min.DaysFromAuc , to = max.DaysFromAuc, by = 1)) + \n  scale_colour_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                      name=\"Property Sold in the Auction?\",\n                      breaks=c(\"0\", \"1\"),\n                      labels=c(\"No\", \"Yes\")) + \n  scale_fill_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                    name=\"Property Sold in the Auction?\",\n                    breaks=c(\"0\", \"1\"),\n                    labels=c(\"No\", \"Yes\"))\n\n\n\nviews.summary$IsSold <- as.factor(views.summary$IsSold)\n\npdp.views.plot <- ggplot(data = subset(views.summary, DaysFromAuc >= min.DaysFromAuc & DaysFromAuc <= max.DaysFromAuc)) + \n  geom_line(aes(y = mid.cum.views, x = DaysFromAuc, colour = IsSold), size = 1.5) +  \n  geom_ribbon(aes(x=DaysFromAuc,  ymin=lower.cum.views , ymax = upper.cum.views, fill = IsSold), alpha = 0.3) +\n  #   scale_colour_economist()  +  theme_economist() +\n  labs(x ='Day from Auction', y = 'Cumulative Number of Page Views', \n       title = 'Total Page Views Range vs. Day from Auction, REO Pre-Sale-Sold 1/15/15-3/15/15') +\n  theme(axis.title.x = element_text(size=14), axis.title.y = element_text(size=14), title = element_text(size=18))  + \n  theme(legend.position=\"top\") +\n  scale_x_continuous(breaks= seq(from = min.DaysFromAuc , to = max.DaysFromAuc, by = 1)) +\n  scale_colour_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                      name=\"Property Sold in the Auction?\",\n                      breaks=c(\"0\", \"1\"),\n                      labels=c(\"No\", \"Yes\")) + \n  scale_fill_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                    name=\"Property Sold in the Auction?\",\n                    breaks=c(\"0\", \"1\"),\n                    labels=c(\"No\", \"Yes\"))\n\nsaves.summary$IsSold <- as.factor(saves.summary$IsSold)\n\nfav.saves.plot <- ggplot(data = subset(saves.summary, DaysFromAuc >= min.DaysFromAuc & DaysFromAuc <= max.DaysFromAuc)) + \n  geom_line(aes(y = mid.cum.saves, x = DaysFromAuc, colour = IsSold), size = 1.5) +  \n  geom_ribbon(aes(x=DaysFromAuc,  ymin = lower.cum.saves , ymax = upper.cum.saves, fill = IsSold), alpha = 0.3) +\n  labs(x ='Day from Auction', y = 'Cumulative Number of Favorite Saves', \n       title = 'Total Favorite Saves vs. Day from Auction, REO Pre-Sale-Sold 1/15/15-3/15/15') +\n  theme(axis.title.x = element_text(size=14), axis.title.y = element_text(size=14), title = element_text(size=18))  + \n  theme(legend.position=\"top\") +\n  scale_x_continuous(breaks= seq(from = min.DaysFromAuc , to = max.DaysFromAuc, by = 1)) +\n  scale_colour_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                      name=\"Property Sold in the Auction?\",\n                      breaks=c(\"0\", \"1\"),\n                      labels=c(\"No\", \"Yes\")) + \n  scale_fill_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                    name=\"Property Sold in the Auction?\",\n                    breaks=c(\"0\", \"1\"),\n                    labels=c(\"No\", \"Yes\"))\n\npdp.views.plot \nfav.saves.plot \nNon.IDOs.plot\nIDOs.plot\n\nn.sold.pre.sale <- sum(subset(auc.daily.sub.dat,  DaysFromAuc == 0)$IsSold)\nn.not.sold.pre.sale  <- sum(1 - subset(auc.daily.sub.dat,  DaysFromAuc == 0)$IsSold)\n```\n\nTotal number of properties shown above: $`r n.sold.pre.sale  + n.not.sold.pre.sale`$\nSold: $`r n.sold.pre.sale `$\nNot Sold: $`r n.not.sold.pre.sale`$ \n\n\\clearpage\n\n## Florida and HUD Product  Behavioural Metrics\n\n```{r DescriptivePlot_FL_HUD, echo = FALSE, message=FALSE, results='hide', cache=TRUE}\n\nauc.daily.sub.dat <- auc.daily.dat %>% filter(ShellSellerGroup %in% c('HUD') &  PropertyState == 'FL') \n\nviews.summary <- auc.daily.sub.dat %>% group_by(DaysFromAuc, IsSold) %>%\n  summarise(mid.cum.views = median(cum.views), upper.cum.views = quantile(cum.views, 3/4), lower.cum.views = quantile(cum.views, 1/4),\n            sd.cum.views = sd(cum.views))\n\nsaves.summary <- auc.daily.sub.dat %>% group_by(DaysFromAuc, IsSold) %>%\n  summarise(mid.cum.saves = median(cum.saves), upper.cum.saves = quantile(cum.saves, 3/4), lower.cum.saves = quantile(cum.saves, 1/4),\n            sd.cum.saves = sd(cum.saves))\n\n\nregs.summary <- auc.daily.sub.dat %>% group_by(DaysFromAuc, IsSold) %>%\n  summarise(mid.cum.IDOs = median(cum.IDOs), avg.IDOs = mean(IDOs), \n            upper.cum.IDOs = quantile(cum.IDOs, 3/4), lower.cum.IDOs = quantile(cum.IDOs, 1/4),\n            mid.cum.Non.IDOs = median(cum.Non.IDOs), avg.Non.IDOs = mean(IDOs), \n            upper.cum.Non.IDOs = quantile(cum.Non.IDOs, 3/4), lower.cum.Non.IDOs = quantile(cum.Non.IDOs, 1/4))\n\nregs.summary$IsSold <- as.factor(regs.summary$IsSold)\n\nIDOs.plot <- ggplot(data = subset(regs.summary, DaysFromAuc >= min.DaysFromAuc & DaysFromAuc <= max.DaysFromAuc)) + \n  geom_line(aes(y = mid.cum.IDOs, x = DaysFromAuc, colour = IsSold), size = 1.5) +   \n  geom_ribbon(aes(x=DaysFromAuc,  ymin = lower.cum.IDOs , ymax = upper.cum.IDOs, fill = IsSold), alpha = 0.3) +\n  labs(x ='Day from Auction', y = 'Cumulative Number of Registrants', \n       title = 'Total IDO Registrants vs. Day from Auction, FL HUD 1/15/15-3/15/15') +\n  theme(axis.title.x = element_text(size=14), axis.title.y = element_text(size=14), title = element_text(size=18))  + \n  theme(legend.position=\"top\") +\n  scale_x_continuous(breaks= seq(from = min.DaysFromAuc , to = max.DaysFromAuc, by = 1)) +\n  scale_colour_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                      name=\"Property Sold in the Auction?\",\n                      breaks=c(\"0\", \"1\"),\n                      labels=c(\"No\", \"Yes\")) + \n  scale_fill_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                    name=\"Property Sold in the Auction?\",\n                    breaks=c(\"0\", \"1\"),\n                    labels=c(\"No\", \"Yes\"))\n\nNon.IDOs.plot <- ggplot(data = subset(regs.summary, DaysFromAuc >= min.DaysFromAuc & DaysFromAuc <= max.DaysFromAuc)) + \n  geom_line(aes(y = mid.cum.Non.IDOs, x = DaysFromAuc, colour = IsSold), size = 1.5) +   \n  geom_ribbon(aes(x=DaysFromAuc,  ymin = lower.cum.Non.IDOs , ymax = upper.cum.Non.IDOs, fill = IsSold), alpha = 0.3) +\n  labs(x ='Day from Auction', y = 'Cumulative Number of Registrants', \n       title = 'Total Non-IDO Registrants vs. Day from Auction, FL HUD 1/15/15-3/15/15') +\n  theme(axis.title.x = element_text(size=14), axis.title.y = element_text(size=14), title = element_text(size=18))  + \n  theme(legend.position=\"top\") +\n  scale_x_continuous(breaks= seq(from = min.DaysFromAuc , to = max.DaysFromAuc, by = 1)) + \n  scale_colour_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                      name=\"Property Sold in the Auction?\",\n                      breaks=c(\"0\", \"1\"),\n                      labels=c(\"No\", \"Yes\")) + \n  scale_fill_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                    name=\"Property Sold in the Auction?\",\n                    breaks=c(\"0\", \"1\"),\n                    labels=c(\"No\", \"Yes\"))\n\n\n\nviews.summary$IsSold <- as.factor(views.summary$IsSold)\n\npdp.views.plot <- ggplot(data = subset(views.summary, DaysFromAuc >= min.DaysFromAuc & DaysFromAuc <= max.DaysFromAuc)) + \n  geom_line(aes(y = mid.cum.views, x = DaysFromAuc, colour = IsSold), size = 1.5) +  \n  geom_ribbon(aes(x=DaysFromAuc,  ymin=lower.cum.views , ymax = upper.cum.views, fill = IsSold), alpha = 0.3) +\n  #   scale_colour_economist()  +  theme_economist() +\n  labs(x ='Day from Auction', y = 'Cumulative Number of Page Views', \n       title = 'Total Page Views Range vs. Day from Auction, FL HUD 1/15/15-3/15/15') +\n  theme(axis.title.x = element_text(size=14), axis.title.y = element_text(size=14), title = element_text(size=18))  + \n  theme(legend.position=\"top\") +\n  scale_x_continuous(breaks= seq(from = min.DaysFromAuc , to = max.DaysFromAuc, by = 1)) +\n  scale_colour_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                      name=\"Property Sold in the Auction?\",\n                      breaks=c(\"0\", \"1\"),\n                      labels=c(\"No\", \"Yes\")) + \n  scale_fill_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                    name=\"Property Sold in the Auction?\",\n                    breaks=c(\"0\", \"1\"),\n                    labels=c(\"No\", \"Yes\"))\n\nsaves.summary$IsSold <- as.factor(saves.summary$IsSold)\n\nfav.saves.plot <- ggplot(data = subset(saves.summary, DaysFromAuc >= min.DaysFromAuc & DaysFromAuc <= max.DaysFromAuc)) + \n  geom_line(aes(y = mid.cum.saves, x = DaysFromAuc, colour = IsSold), size = 1.5) +  \n  geom_ribbon(aes(x=DaysFromAuc,  ymin = lower.cum.saves , ymax = upper.cum.saves, fill = IsSold), alpha = 0.3) +\n  labs(x ='Day from Auction', y = 'Cumulative Number of Favorite Saves', \n       title = 'Total Favorite Saves vs. Day from Auction, FL HUD 1/15/15-3/15/15') +\n  theme(axis.title.x = element_text(size=14), axis.title.y = element_text(size=14), title = element_text(size=18))  + \n  theme(legend.position=\"top\") +\n  scale_x_continuous(breaks= seq(from = min.DaysFromAuc , to = max.DaysFromAuc, by = 1)) +\n  scale_colour_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                      name=\"Property Sold in the Auction?\",\n                      breaks=c(\"0\", \"1\"),\n                      labels=c(\"No\", \"Yes\")) + \n  scale_fill_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                    name=\"Property Sold in the Auction?\",\n                    breaks=c(\"0\", \"1\"),\n                    labels=c(\"No\", \"Yes\"))\n\npdp.views.plot \nfav.saves.plot \nNon.IDOs.plot\nIDOs.plot\n\nn.sold.FL <- sum(subset(auc.daily.sub.dat,  DaysFromAuc == 0)$IsSold)\nn.not.sold.FL <- sum(1 - subset(auc.daily.sub.dat,  DaysFromAuc == 0)$IsSold)\n```\n\nTotal number of properties shown above: $`r n.sold.FL + n.not.sold.FL`$\nSold: $`r n.sold.FL`$\nNot Sold: $`r n.not.sold.FL`$ \n\n\\clearpage\n\n## Trustee Registrations \n\n```{r DescriptivePlot_Trustee, echo = FALSE, message=FALSE, results='hide', cache=TRUE}\n\nresearch.start <- as.Date('2015-01-15', format = '%Y-%m-%d')\nresearch.end   <- as.Date('2015-03-15', format = '%Y-%m-%d')\n\ndataPath   <- 'C:\\\\Users\\\\edng\\\\Desktop\\\\Projects\\\\Some Data'\n\n###################################################\n##  Read and Tidy Up All Base Data\n###################################################\n\nsetwd(dataPath)\n\n###################################################\n##  Auction Asset Data\n###################################################\n\ntps.stat             <- read.csv('FactTrustee_Base_20140901_to_now.csv', na.strings = \"NULL\")\nnames(tps.stat)      <- gsub('[^a-z]\\\\.\\\\.', \"\", x = names(tps.stat) ) #getting rid of crazy naming\ntps.stat$AuctionDate <- as.Date(as.character(tps.stat$AuctionDate), format  = '%Y-%m-%d')\n\ntps.stat <- subset(tps.stat, AuctionDate >= research.start & AuctionDate <= research.end)\ntps.base <- tps.stat %>% select(AuctionId, PropertyId) ## %>% group_by(AuctionId, PropertyId) %>% summarise(cnt = n()) \n  ## base used to filter the auction\n\n###################################################\n##  Registrants Data\n###################################################\n\ntps.regs1 <- read.csv('TrusteeReg201501.csv')\ntps.regs1 <- tps.regs1 %>% inner_join(tps.base, by = c('AuctionId','PropertyId'))\n\ntps.regs2 <- read.csv('TrusteeReg201502.csv')\ntps.regs2 <- tps.regs2 %>% inner_join(tps.base, by = c('AuctionId','PropertyId'))\n\ntps.regs3 <- read.csv('TrusteeReg201503.csv')\ntps.regs3 <- tps.regs3 %>% inner_join(tps.base, by = c('AuctionId','PropertyId'))\n\ntps.regs <- rbind(tps.regs1, tps.regs2, tps.regs3)\nrm(tps.regs1); rm(tps.regs2); rm(tps.regs3);\n\ntps.regs$AuctionDate <- as.Date(as.character(tps.regs$AuctionDate), format  = '%Y-%m-%d')\n\nnames(tps.regs) <- gsub('[^a-z]\\\\.\\\\.', \"\", x = names(tps.regs) ) #getting rid of crazy naming\n\ntps.views <- read.csv(file = 'UUID_Trustee_Page_Views_from_20150115_to_20150315.csv')\ntps.views$visit.date <- as.Date(as.character(tps.views$visit.date), format = '%Y-%m-%d')\ntps.views$AuctionDate <- as.Date(as.character(tps.views$AuctionDate), format = '%Y-%m-%d')\n\n###################################################\n##  Favorite Saves Data\n###################################################\n\ntps.fav <- read.csv('TrusteeFavorites_Acty_20140901_to_2014_0315.csv')\ntps.fav$save.date <- as.Date(as.character(tps.fav$SavedDate), format='%Y-%m-%d')\ntps.fav$SavedDate <- NULL\nnames(tps.fav) <- gsub('[^a-z]\\\\.\\\\.', \"\", x = names(tps.fav) ) #getting rid of crazy naming\n\ntps.fav <- tps.fav %>% inner_join(tps.base, by = c('AuctionId', 'PropertyId'))\ntps.fav$SaveDayFromAuc <- as.numeric(as.character(tps.fav$SaveDayFromAuc))\n\n####################################################\n##  Aggregating data into daily auction asset level\n####################################################\n\nmin.DaysFromAuc <- -30\nmax.DaysFromAuc <- 3\nl <- max.DaysFromAuc - min.DaysFromAuc + 1\n\ntps.regs       <- subset(tps.regs,       RegDaysFromAuc  >= min.DaysFromAuc & RegDaysFromAuc  <= max.DaysFromAuc)\ntps.views      <- subset(tps.views,      VisDayFromAuc   >= min.DaysFromAuc & VisDayFromAuc   <= max.DaysFromAuc)\ntps.fav        <- subset(tps.fav,        SaveDayFromAuc  >= min.DaysFromAuc & SaveDayFromAuc  <= max.DaysFromAuc)\n\ndaily.regs  <- tps.regs %>% \n  group_by(RegDaysFromAuc, AuctionId, PropertyId) %>% summarise(regs.cnt = n())\n\ndaily.views <- tps.views %>% \n  group_by(VisDayFromAuc, AuctionId, PropertyId) %>% summarise(pdp.views = sum(pdp.views))\n\ndaily.saves <- tps.fav %>% \n  group_by(SaveDayFromAuc, AuctionId, PropertyId) %>% summarise(fav.saves = n())\n\nnames(daily.regs)[names(daily.regs)       == 'RegDaysFromAuc']     <- 'DaysFromAuc'\nnames(daily.views)[names(daily.views)     == 'VisDayFromAuc']      <- 'DaysFromAuc'\nnames(daily.saves)[names(daily.saves)     == 'SaveDayFromAuc']     <- 'DaysFromAuc'\n\ntps.daily.dat <- data.frame(AuctionDate       = rep(tps.stat$AuctionDate, each = l),\n                            AuctionId         = rep(tps.stat$AuctionId, each = l),\n                            PropertyId        = rep(tps.stat$PropertyId, each = l),\n                            IsSold            = rep(tps.stat$IsSold, each = l),\n                            DaysFromAuc       = rep(seq(from = min.DaysFromAuc, to = max.DaysFromAuc, by = 1), \n                                                    nrow(tps.stat)))\n\ntps.daily.dat <- tps.daily.dat %>% \n  left_join(daily.views,   by = c('AuctionId', 'PropertyId', 'DaysFromAuc')) %>%\n  left_join(daily.saves,   by = c('AuctionId', 'PropertyId', 'DaysFromAuc')) %>%\n  left_join(daily.regs,    by = c('AuctionId', 'PropertyId', 'DaysFromAuc')) \n\n\ntps.daily.dat$regs.cnt[is.na(tps.daily.dat$regs.cnt)] <- 0 \ntps.daily.dat$fav.saves[is.na(tps.daily.dat$fav.saves)] <- 0 \ntps.daily.dat$pdp.views[is.na(tps.daily.dat$pdp.views)] <- 0 \n\ntps.daily.dat <- tps.daily.dat %>% group_by(AuctionId, PropertyId) %>% \n  mutate(cum.regs = cumsum(regs.cnt), cum.saves = cumsum(fav.saves), cum.views = cumsum(pdp.views))\n\n###################################################################################\n##  Descriptive table for Each Metrics\n###################################################################################\n\ntps.views.summary <- tps.daily.dat %>% group_by(DaysFromAuc, IsSold) %>%\n  summarise(mid.cum.views = median(cum.views), upper.cum.views = quantile(cum.views, 3/4), lower.cum.views = quantile(cum.views, 1/4),\n            sd.cum.views = sd(cum.views))\n\ntps.saves.summary <- tps.daily.dat %>% group_by(DaysFromAuc, IsSold) %>%\n  summarise(mid.cum.saves = median(cum.saves), upper.cum.saves = quantile(cum.saves, 3/4), lower.cum.saves = quantile(cum.saves, 1/4),\n            sd.cum.saves = sd(cum.saves))\n\ntps.regs.summary <- tps.daily.dat %>% group_by(DaysFromAuc, IsSold) %>%\n  summarise(mid.cum.regs = median(cum.regs), avg.regs = mean(regs.cnt), \n            upper.cum.regs = quantile(cum.regs, 3/4), lower.cum.regs = quantile(cum.regs, 1/4))\n\n\ntps.views.summary$IsSold <- as.factor(tps.views.summary$IsSold)\ntps.saves.summary$IsSold <- as.factor(tps.saves.summary$IsSold)\ntps.regs.summary$IsSold  <- as.factor(tps.regs.summary$IsSold)\n\ntps.regs.plot <- ggplot(data = subset(tps.regs.summary, DaysFromAuc >= min.DaysFromAuc & DaysFromAuc <= max.DaysFromAuc)) + \n  geom_line(aes(y = mid.cum.regs, x = DaysFromAuc, colour = IsSold), size = 1.5) +   \n  geom_ribbon(aes(x=DaysFromAuc,  ymin = lower.cum.regs , ymax = upper.cum.regs, fill = IsSold), alpha = 0.3) +\n  labs(x ='Day from Auction', y = 'Cumulative Number of Registrants', \n       title = 'Total Registrants vs. Day from Auction, TPS 1/15/15-3/15/15') +\n  theme(axis.title.x = element_text(size=14), axis.title.y = element_text(size=14), title = element_text(size=18))  + \n  theme(legend.position=\"top\") +\n  scale_x_continuous(breaks= seq(from = min.DaysFromAuc , to = max.DaysFromAuc, by = 1)) +\n  scale_colour_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                      name=\"Property Sold in the Auction?\",\n                      breaks=c(\"0\", \"1\"),\n                      labels=c(\"No\", \"Yes\")) + \n  scale_fill_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                    name=\"Property Sold in the Auction?\",\n                    breaks=c(\"0\", \"1\"),\n                    labels=c(\"No\", \"Yes\"))\n\n\n\ntps.saves.plot <- ggplot(data = subset(tps.saves.summary, DaysFromAuc >= min.DaysFromAuc & DaysFromAuc <= max.DaysFromAuc)) + \n  geom_line(aes(y = mid.cum.saves, x = DaysFromAuc, colour = IsSold), size = 1.5) +  \n  geom_ribbon(aes(x=DaysFromAuc,  ymin = lower.cum.saves , ymax = upper.cum.saves, fill = IsSold), alpha = 0.3) +\n  labs(x ='Day from Auction', y = 'Cumulative Number of Favorite Saves', \n       title = 'Total Favorite Saves vs. Day from Auction, REO 1/15/15-3/15/15') +\n  theme(axis.title.x = element_text(size=14), axis.title.y = element_text(size=14), title = element_text(size=18))  + \n  theme(legend.position=\"top\") +\n  scale_x_continuous(breaks= seq(from = min.DaysFromAuc , to = max.DaysFromAuc, by = 1)) +\n  scale_colour_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                      name=\"Property Sold in the Auction?\",\n                      breaks=c(\"0\", \"1\"),\n                      labels=c(\"No\", \"Yes\")) + \n  scale_fill_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                    name=\"Property Sold in the Auction?\",\n                    breaks=c(\"0\", \"1\"),\n                    labels=c(\"No\", \"Yes\"))\n\n\ntps.views.plot <- ggplot(data = subset(tps.views.summary, DaysFromAuc >= min.DaysFromAuc & DaysFromAuc <= max.DaysFromAuc)) + \n  geom_line(aes(y = mid.cum.views, x = DaysFromAuc, colour = IsSold), size = 1.5) +  \n  geom_ribbon(aes(x=DaysFromAuc,  ymin=lower.cum.views , ymax = upper.cum.views, fill = IsSold), alpha = 0.3) +\n  #   scale_colour_economist()  +  theme_economist() +\n  labs(x ='Day from Auction', y = 'Cumulative Number of Page Views', \n       title = 'Total Page Views Range vs. Day from Auction, REO 1/15/15-3/15/15') +\n  theme(axis.title.x = element_text(size=14), axis.title.y = element_text(size=14), title = element_text(size=18))  + \n  theme(legend.position=\"top\") +\n  scale_x_continuous(breaks= seq(from = min.DaysFromAuc , to = max.DaysFromAuc, by = 1)) +\n  scale_colour_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                      name=\"Property Sold in the Auction?\",\n                      breaks=c(\"0\", \"1\"),\n                      labels=c(\"No\", \"Yes\")) + \n  scale_fill_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                    name=\"Property Sold in the Auction?\",\n                    breaks=c(\"0\", \"1\"),\n                    labels=c(\"No\", \"Yes\"))\n\ntps.views.plot\ntps.saves.plot\ntps.regs.plot \n\nn.sold.tps <- sum(subset(tps.daily.dat,  DaysFromAuc == 0)$IsSold)\nn.not.sold.tps <- sum(1 - subset(tps.daily.dat,  DaysFromAuc == 0)$IsSold)\n```\n\nTotal number of properties shown above: $`r n.sold.tps + n.not.sold.tps`$\nSold: $`r n.sold.tps`$\nNot Sold: $`r n.not.sold.tps`$ \n\n\\clearpage\n\n## Prediction Power on Behavioural Metrics\n\nAfter observing the quartile range and medians on sold and not sold assets, it is obvious that there are some values on behavioral metrics except that the IDO registrants on the \"solds\" and the \"not solds\" overlapped quite a bit.\n\nOne method to consume the data is to build a logistic regression model and curve fitting the soft sell rate with the metrics.  Some quick examples show below with the snapshot on 1 day before the auction.\n\n```{r SnapshotPrediction, echo = FALSE, message=FALSE, results='hide', cache=TRUE}\n###################################################################################\n##  Example of SnapShot Prediction: Non-IDOs, Page Views\n###################################################################################\n\n# Now, just use REO subset\nreo.auc.daily.dat <- subset(auc.daily.dat, ProductType %in% c('REO','Day 1 REO') &  IsPreSaleSold == 0) \n\n##Getting 1 day right before auction\nright.before.auc <- subset(reo.auc.daily.dat,  DaysFromAuc == -1)\n\n##IDOs\nNon.IDOs.logit <- glm(IsSold ~ cum.Non.IDOs + sqrt(cum.Non.IDOs), \n                         data = right.before.auc, family = \"binomial\")\n\nNon.IDOs.logit.summary <- summary(Non.IDOs.logit)\n\nright.before.auc$fit <- Non.IDOs.logit$fitted.values\n\n#score chart\nNon.IDOs.cnt.bin <- right.before.auc %>% group_by(cum.Non.IDOs) %>% \n  summarise(sold.rate = sum(IsSold)/n(), case.cnt = n()) \n\ndata.use.to.pred  <- data.frame(cum.Non.IDOs = seq(from = 0,to = max(right.before.auc$cum.Non.IDOs),by = 1))\ndata.use.to.pred$fit <- predict(Non.IDOs.logit, newdata = data.use.to.pred, type = \"response\")\n\nscore.data <- data.use.to.pred\nnames(score.data) <- c('cum.Non.IDOs','sold.rate')\nscore.data$variable <- 'fit'\n\nscore.data2 <- Non.IDOs.cnt.bin[,1:2]\nscore.data2$variable <- 'actual'\n\nNon.IDOs.score.data <- rbind(score.data,score.data2)\n\nNon.IDos.snapshot <- ggplot(data = Non.IDOs.score.data) + \n  geom_line(aes(y = sold.rate, x = cum.Non.IDOs, colour = variable), data = subset(Non.IDOs.score.data, variable == 'fit')) +\n  geom_point(aes(y = sold.rate, x = cum.Non.IDOs, colour = variable), data = subset(Non.IDOs.score.data, variable == 'actual')) +\n  labs(x ='# of Non-IDO Registrants', y = 'Sell Through Rate', title = '# of Non-IDO Registrants 1Day before Auction vs. Sell Through Rate') +\n  scale_y_continuous(labels = percent) + \n  scale_colour_manual(values=c(\"#3399FF\", \"#336666\"), \n                      name=\"Fit/Actual\",\n                      breaks=c(\"fit\", \"actual\"),\n                      labels=c(\"Fit\", \"Actual\"))  + \n  scale_fill_manual(values=c(\"#3399FF\", \"#336666\"), \n                    name=\"Fit/Actual\",\n                    breaks=c(\"fit\", \"actual\"),\n                    labels=c(\"Fit\", \"Actual\")) +\n  theme(axis.title.x = element_text(size=14), axis.title.y = element_text(size=14), title = element_text(size=18))  + \n  theme(legend.position=\"top\")    \n\nNon.IDos.snapshot\n\n##Page Views\nviews.logit <- glm(IsSold ~ cum.views + sqrt(cum.views) + I(cum.views^1.5), \n                      data = right.before.auc, family = \"binomial\")\n\nviews.logit.summary <- summary(views.logit)\n\nright.before.auc$fit <- views.logit$fitted.values\n\n#score chart\nviews.cnt.bin <- right.before.auc %>% mutate(cum.views.round = round(cum.views/10)*10) %>% group_by(cum.views.round) %>% \n  summarise(sold.rate = sum(IsSold)/n(), case.cnt = n()) \n\ndata.use.to.pred     <- data.frame(cum.views = seq(from = 0,to = 500,by = 10))\ndata.use.to.pred$fit <- predict(views.logit, newdata = data.use.to.pred, type = \"response\")\n\nscore.data <- data.use.to.pred\nnames(score.data) <- c('cum.views.round','sold.rate')\nscore.data$variable <- 'fit'\n\nscore.data2 <- subset(views.cnt.bin[,1:2], cum.views.round <= 500)\nscore.data2$variable <- 'actual'\n\nviews.score.data <- rbind(score.data,score.data2)\n\nviews.snapshot <- ggplot(data = views.score.data) + \n  geom_line(aes(y = sold.rate, x = cum.views.round, colour = variable), data = subset(views.score.data, variable == 'fit')) +\n  geom_point(aes(y = sold.rate, x = cum.views.round, colour = variable), data = subset(views.score.data, variable == 'actual')) +\n  labs(x ='# of Page Views', y = 'Sell Through Rate', title = '# of Page Views 1Day before Auction vs. Sell Through Rate ') +\n  scale_y_continuous(labels = percent) + \n  scale_colour_manual(values=c(\"#3399FF\", \"#336666\"), \n                      name=\"Fit/Actual\",\n                      breaks=c(\"fit\", \"actual\"),\n                      labels=c(\"Fit\", \"Actual\"))  + \n  scale_fill_manual(values=c(\"#3399FF\", \"#336666\"), \n                    name=\"Fit/Actual\",\n                    breaks=c(\"fit\", \"actual\"),\n                    labels=c(\"Fit\", \"Actual\")) +\n  theme(axis.title.x = element_text(size=14), axis.title.y = element_text(size=14), title = element_text(size=18))  + \n  theme(legend.position=\"top\")    \n\nviews.snapshot\n```\n\n```{r NonIDOsSnapShotPredSummary, echo = FALSE, results='asis', cache=TRUE}\nprint(xtable(Non.IDOs.logit.summary), comment = 'F')\n```\n\n```{r ViewsSnapShotPredSummary, echo = FALSE, results='asis', cache=TRUE}\nprint(xtable(views.logit.summary), comment = 'F')\n```\n\nWe would not justify the coefficients here since the purpose in this section is to showcase some ways to model the data.\n\n## Bringing all Metrics Together\n\n### REO\n\nHere, we put page views, favorite saves and number of registrations together and calibrate a __LASSO__ model separately on each day before the auction starts since 7 days before the auction. \n\nWe use similar approach by setting moderate aggressive criteria (score > 0.2) in selecting positive response.  Below are the results.  It seems quite desirable.  However, the disadvantage of this model is having a short forecast horizon.\n\n```{r AssetLevelPredictionTable, echo = FALSE, message=FALSE, results='hide', cache=TRUE}\nset.seed(1000)\nt.iter <- seq(from = -7, to = 2, by = 1)\n\nBehavoural.Model.Table <- data.frame(DaysFromAuc = t.iter, intercept=NA, views.coef= NA,\n                                     saves.coef= NA,  IDOs.coef=NA, Non.IDOs.coef=NA,\n                                     lambda = NA, true.positive=NA, true.negative=NA, false.positive=NA, false.negative=NA)\n\nfor(i in 1:length(t.iter)){\n\n  my.set <- subset(reo.auc.daily.dat,  DaysFromAuc == t.iter[i])\n\n  x <- cbind((my.set$cum.views - mean(my.set$cum.views))/sd(my.set$cum.views), \n            (my.set$cum.saves - mean(my.set$cum.saves))/sd(my.set$cum.saves), \n             (my.set$cum.IDOs - mean(my.set$cum.IDOs))/sd(my.set$cum.IDOs), \n             (my.set$cum.Non.IDOs - mean(my.set$cum.Non.IDOs))/sd(my.set$cum.Non.IDOs))\n  y <- my.set$IsSold\n  \n  my.cv.fit <- cv.glmnet(x,y, family=\"binomial\", nfolds = 50, type.measure=\"class\", alpha = 0) \n  #alpha 0 = LASSO or 1 = Ridget or 0.5 = Elastic Zone?\n\n  best.lambda <- my.cv.fit$lambda.min ## lambda.lse or use lambda.min?\n  \n  Behavoural.Model.Table$lambda[i] <- best.lambda\n    \n  Behavoural.Model.Table$intercept[i]     <- coef(my.cv.fit, s = best.lambda)[1]\n  Behavoural.Model.Table$views.coef[i]    <- coef(my.cv.fit, s = best.lambda)[2]\n  Behavoural.Model.Table$saves.coef[i]    <- coef(my.cv.fit, s = best.lambda)[3]\n  Behavoural.Model.Table$IDOs.coef[i]     <- coef(my.cv.fit, s = best.lambda)[4]\n  Behavoural.Model.Table$Non.IDOs.coef[i] <- coef(my.cv.fit, s = best.lambda)[5]\n  \n  my.set$fit <- predict(my.cv.fit, newx = x, s=best.lambda, type = \"response\") ##give you the actual predicted probabilities \n  \n  Behavoural.Model.Table$true.positive[i]   <- sum(my.set$fit >=   0.2  &   my.set$IsSold == 1)\n  Behavoural.Model.Table$true.negative[i]   <- sum(my.set$fit <    0.2  &   my.set$IsSold == 0)\n  Behavoural.Model.Table$false.positive[i]  <- sum(my.set$fit >=   0.2  &   my.set$IsSold == 0)\n  Behavoural.Model.Table$false.negative[i]  <- sum(my.set$fit <    0.2  &   my.set$IsSold == 1)\n  \n}\n```\n\n```{r AssetLevelPredictionTable2, echo = FALSE, cache=TRUE}\nBehavoural.Model.Table$intercept <- round(Behavoural.Model.Table$intercept, 3)\nBehavoural.Model.Table$views.coef <- round(Behavoural.Model.Table$views.coef, 3)\nBehavoural.Model.Table$saves.coef <- round(Behavoural.Model.Table$saves.coef, 3)\nBehavoural.Model.Table$IDOs.coef <- round(Behavoural.Model.Table$IDOs.coef, 3)\nBehavoural.Model.Table$Non.IDOs.coef <- round(Behavoural.Model.Table$Non.IDOs.coef, 3)\nBehavoural.Model.Table$lambda <- round(Behavoural.Model.Table$lambda, 3)\nkable(format(Behavoural.Model.Table[,c(1:7)], big.mark=\",\", small.mark = \",\", small.interval=3),  format = 'latex', align = 'r')\nkable(format(Behavoural.Model.Table[,c(1,8:ncol(Behavoural.Model.Table))], big.mark=\",\", small.mark = \",\", small.interval=3),  format = 'latex', align = 'r')\n```\n\nNote that, the true positive rate here is almost __50%__ while maintaining similar true negative rate is around __90%__.  The positive response prediction is more sensitive when closer to auction while the overall performance, coefficients and lambda are roughly the same range on each model.\n\nThe overall accuracy in Day 0 model is (1350  + 26004)/(1350 + 26004 + 1680 + 2431) = __87%__\n\n### Trustee\n```{r PredictionTable_Trustee, echo = FALSE, message=FALSE, results='hide', cache=FALSE}\nset.seed(1000)\nt.iter <- seq(from = -7, to = 2, by = 1)\n\nBehavoural.Model.Table <- data.frame(DaysFromAuc = t.iter, intercept=NA, views.coef= NA,\n                                     saves.coef= NA,  regs.coef=NA, true.positive=NA, true.negative=NA, \n                                     false.positive=NA, false.negative=NA)\n\nfor(i in 1:length(t.iter)){\n\n  my.set <- subset(tps.daily.dat,  DaysFromAuc == t.iter[i])\n\n#   x <- cbind((my.set$cum.views - mean(my.set$cum.views))/sd(my.set$cum.views), \n#             (my.set$cum.saves - mean(my.set$cum.saves))/sd(my.set$cum.saves), \n#               (my.set$cum.regs - mean(my.set$cum.regs ))/sd(my.set$cum.regs))\n#     \n#   y <- my.set$IsSold\n#   \n#   my.cv.fit <- cv.glmnet(x,y, family=\"binomial\", nfolds = 50, type.measure=\"class\", alpha = 0.5) \n  #alpha 0 = LASSO or 1 = Ridget or 0.5 = Elastic Zone?\n\n#   best.lambda <- my.cv.fit$lambda.min ## lambda.lse or use lambda.min?\n  \n  x1 <- (my.set$cum.views - mean(my.set$cum.views))/sd(my.set$cum.views)\n  x2 <- (my.set$cum.saves - mean(my.set$cum.saves))/sd(my.set$cum.saves)\n  x3 <- (my.set$cum.regs - mean(my.set$cum.regs ))/sd(my.set$cum.regs)\n\n  gg <- glm(my.set$IsSold ~ x1 + x2 + x3)\n  ss <- summary(gg)\n\n#  Behavoural.Model.Table$lambda[i] <- best.lambda\n    \n  Behavoural.Model.Table$intercept[i]     <- ss$coef[1]\n  Behavoural.Model.Table$views.coef[i]    <- ss$coef[2]\n  Behavoural.Model.Table$saves.coef[i]    <- ss$coef[3]\n  Behavoural.Model.Table$regs.coef[i]     <- ss$coef[4]\n\n#   my.set$fit <- predict(my.cv.fit, newx = x, s=best.lambda, type = \"response\") ##give you the actual predicted probabilities \n  my.set$fit <-   gg$fitted.values\n\n  Behavoural.Model.Table$true.positive[i]   <- sum(my.set$fit >=   0.2  &   my.set$IsSold == 1)\n  Behavoural.Model.Table$true.negative[i]   <- sum(my.set$fit <    0.2  &   my.set$IsSold == 0)\n  Behavoural.Model.Table$false.positive[i]  <- sum(my.set$fit >=   0.2  &   my.set$IsSold == 0)\n  Behavoural.Model.Table$false.negative[i]  <- sum(my.set$fit <    0.2  &   my.set$IsSold == 1)\n  \n}\n```\n\n```{r PredictionTable2_Trustee, echo = FALSE, cache=FALSE}\nBehavoural.Model.Table$intercept <- round(Behavoural.Model.Table$intercept, 3)\nBehavoural.Model.Table$views.coef <- round(Behavoural.Model.Table$views.coef, 3)\nBehavoural.Model.Table$saves.coef <- round(Behavoural.Model.Table$saves.coef, 3)\nBehavoural.Model.Table$regs.coef <- round(Behavoural.Model.Table$regs.coef, 3)\n# Behavoural.Model.Table$lambda <- round(Behavoural.Model.Table$lambda, 3)\nkable(format(Behavoural.Model.Table[,c(1:5)], big.mark=\",\", small.mark = \",\", small.interval=3),  format = 'latex', align = 'r')\nkable(format(Behavoural.Model.Table[,c(1,6:ncol(Behavoural.Model.Table))], big.mark=\",\", small.mark = \",\", small.interval=3),  format = 'latex', align = 'r')\n```\n\n## Lift Chart of Page Views, Saves and Registrations Model\n\nAnother way to look at the model without making a criteria on identifying positive response and a binary judgement on true and false positive rate is to use the lift chart.\n\n```{r DecileChart, echo = FALSE, message=FALSE, results='hide', cache=FALSE}\nmy.set$decile = 11 - ntile(my.set$fit, 10)\ndecile.rate <- my.set %>% group_by(decile) %>% summarise(sold.cnt = sum(IsSold)) %>%\n  mutate(cum.sold = cumsum(sold.cnt))\n\ndecile.rate$cum.sold.rate     <-  round(decile.rate$cum.sold/sum(decile.rate$sold.cnt), 3)\ndecile.rate$without.lift.rate <- seq(0.1, 1, by = 0.1)\nnew.row <- data.frame(decile = 0 , sold.cnt = 0, cum.sold = 0, cum.sold.rate = 0, without.lift.rate = 0)\ndecile.rate <- rbind(new.row, decile.rate)\ndecile.rate$percentile <- decile.rate$decile/10\n\ndecile.rate.melt <- melt(decile.rate[,c('percentile','cum.sold.rate','without.lift.rate')], id.var = 'percentile')\n\n\nliftchart.plot <- ggplot(data = decile.rate.melt, mapping = aes(x = percentile)) + geom_line(aes(y = value, colour = variable, group = variable), size = 1.5) + \n  scale_y_continuous(labels = percent) + \n  scale_x_continuous(labels = percent) + \n  theme(legend.text   = element_text(size=18))+\n  labs(x ='%Sampled', y = '% Cumulative Positive Response', title = '# Lift Chart of Model with Page Views, Saves and Registrations before Auction') +\n  scale_colour_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                      name=\"\",\n                      breaks=c(\"cum.sold.rate\", \"without.lift.rate\"),\n                      labels=c(\"Lift Curve\", \"Baseline\"))  + \n  scale_fill_manual(values=c(\"#FF8533\", \"#1975FF\"), \n                    name=\"\",\n                    breaks=c(\"cum.sold.rate\", \"without.lift.rate\"),\n                    labels=c(\"Lift Curve\", \"Baseline\")) +\n  theme(axis.title.x = element_text(size=16), axis.title.y = element_text(size=16), title = element_text(size=18))  + \n  theme(legend.position=\"top\")   \nliftchart.plot\n```\n\n# User Level Behovarial Metrics\n\nIn this section, we drill down to user level in order to evaluate the quality of visitors and users on a particular asset auction. Hence, we attempt to derive an improved sell through rate prediction based on the information of the predicted qualities of the users.\n\n## Historical Participation vs. Current Participation\n\nHere, we want to examine the relationship of past 60 days attendance and the upcoming auction attendance.\n\n```{r Historical Attendance, echo = FALSE, cache=TRUE}\nresearch.start <- as.Date('2015-02-15', format = '%Y-%m-%d')\nresearch.end   <- as.Date('2015-03-15', format = '%Y-%m-%d')\n\nsetwd('C:\\\\Users\\\\edng\\\\Desktop\\\\Projects\\\\Programming\\\\R\\\\Registrants Research\\\\Data')\n\n###################################################\n##  Read and Tidy Up Registrants Base Data\n###################################################\n\nregs.dat1 <- read.csv('Regs_Acty_REO_20140901_to_20141231.csv')\nregs.dat2 <- read.csv('Regs_Acty_REO_20150101_to_20150215.csv')\nregs.dat3 <- read.csv('Regs_Acty_REO_20150216_to_20150315.csv')\nregs.dat <- rbind(regs.dat1, regs.dat2, regs.dat3)\nrm(regs.dat1,regs.dat2,regs.dat3)\n\nregs.dat$RegDate     <- as.Date(as.character(regs.dat$RegDate), format = '%Y-%m-%d')\nregs.dat$BidStartDate <- as.Date(as.character(regs.dat$BidStartDate), format = '%Y-%m-%d')\nregs.dat$BidEndDate <- as.Date(as.character(regs.dat$BidEndDate), format = '%Y-%m-%d')\n\nregs.dat <- regs.dat[,!names(regs.dat) %in% c('validatefunds', 'approvalbucket', 'ProductType')]\n\nnames(regs.dat) <- gsub('[^a-z]\\\\.\\\\.', \"\", x = names(regs.dat) ) #getting rid of crazy naming\n\n############################################################\n##  Aggregating User Daily Registrations and Bidding History \n############################################################\n\nBidDailyHist <- regs.dat %>% filter(IsBidder == 1) %>% group_by(UserId, BidEndDate) %>% \n  summarise(IDO.bids = sum(IsIDOUser),tot.bids = n()) %>%\n  mutate (REG.bids = tot.bids - IDO.bids)\n\nRegDailyHist <- regs.dat %>% group_by(UserId, RegDate) %>% \n  summarise(IDO.regs = sum(IsIDOUser),tot.regs = n()) %>%\n  mutate (REG.regs = tot.regs - IDO.regs)\n\nRegAucEndedDailyHist <- regs.dat %>% group_by(UserId, BidEndDate) %>% \n  summarise(IDO.regs = sum(IsIDOUser),tot.regs = n()) %>%\n  mutate (REG.regs = tot.regs - IDO.regs)\n\n##############################################\n## Subsetting the data\n##############################################\n\nlookback <- 60\n\nregs.dat             <- subset(regs.dat, BidEndDate >= research.start & BidEndDate <= research.end)\nBidDailyHist         <- subset(BidDailyHist, BidEndDate - research.start >= -lookback)\nRegDailyHist         <- subset(RegDailyHist,  RegDate - research.start >= - lookback)\nRegAucEndedDailyHist <- subset(RegAucEndedDailyHist, BidEndDate - research.start >= -lookback)\n\n#################################################\n## Getting the History in Rolling Window\n#################################################\n\nBidHist <- regs.dat %>% left_join(BidDailyHist, by = 'UserId') %>% \n  filter(RegDate - BidEndDate.y > 0 & RegDate - BidEndDate.y <= lookback) %>%\n  group_by(UserId, AuctionId, PropertyId) %>%\n  summarise(pre.bids.IDO = sum(IDO.bids), pre.bids.Reg = sum(REG.bids))\n\nRegHist <- regs.dat %>% left_join(RegDailyHist, by = 'UserId') %>% \n  filter(RegDate.x - RegDate.y > 0 & RegDate.x - RegDate.y <= lookback) %>%\n  group_by(UserId, AuctionId, PropertyId) %>%\n  summarise(pre.regs.IDO = sum(IDO.regs), pre.regs.Reg = sum(REG.regs))\n\nRegAucEndedHist <- regs.dat %>% left_join(RegAucEndedDailyHist, by = 'UserId') %>% \n  filter(RegDate - BidEndDate.y > 0 & RegDate - BidEndDate.y <= lookback) %>%\n  group_by(UserId, AuctionId, PropertyId) %>%\n  summarise(pre.regs.IDO.auc.ended = sum(IDO.regs), pre.bids.Reg.auc.ended = sum(REG.regs))\n\nregs.dat <- regs.dat %>% left_join(BidHist, by = c('UserId', 'AuctionId', 'PropertyId'))\nregs.dat <- regs.dat %>% left_join(RegHist, by = c('UserId', 'AuctionId', 'PropertyId'))\nregs.dat <- regs.dat %>% left_join(RegAucEndedHist, by = c('UserId', 'AuctionId', 'PropertyId'))\n\nrm(BidHist);rm(RegHist);rm(RegAucEndedHist);\n\nregs.dat$pre.bids.IDO[is.na(regs.dat$pre.bids.IDO)] <- 0\nregs.dat$pre.bids.Reg[is.na(regs.dat$pre.bids.Reg)] <- 0\nregs.dat$pre.regs.IDO[is.na(regs.dat$pre.regs.IDO)] <- 0\nregs.dat$pre.regs.Reg[is.na(regs.dat$pre.regs.Reg)] <- 0\nregs.dat$pre.regs.IDO.auc.ended[is.na(regs.dat$pre.regs.IDO.auc.ended)] <- 0\nregs.dat$pre.bids.Reg.auc.ended[is.na(regs.dat$pre.bids.Reg.auc.ended)] <- 0\n\n#################################################\n## Looking into Non-IDO User Only\n#################################################\n\nNon.IDOs.with.hist.dat <- subset(regs.dat, pre.bids.Reg.auc.ended > 0 & IsIDOUser == 0)\n\nNon.IDOs.with.hist.dat$Regular.attendance <- Non.IDOs.with.hist.dat$pre.bids.Reg/Non.IDOs.with.hist.dat$pre.bids.Reg.auc.ended\nNon.IDOs.with.hist.dat$Regular.attendance.cei <- ceiling((Non.IDOs.with.hist.dat$Regular.attendance)/0.05) * 0.05\n\nNon.IDOs.with.hist.summary <- Non.IDOs.with.hist.dat %>% \n  group_by(Regular.attendance.cei) %>% \n  summarise(bidder.cnt = sum(IsBidder), non.bidder.cnt = sum(1 - IsBidder) , bidder.rate =  sum(IsBidder)/n())\n\n#################################################\n## Looking into Non-IDO User Only\n#################################################\n\nNon.IDOs.melt.data <- melt(data = Non.IDOs.with.hist.summary, id.vars = 'Regular.attendance.cei')\nNon.IDOs.melt.data$Regular.attendance.cei <- as.factor(Non.IDOs.melt.data$Regular.attendance.cei )\n\ns1 <- subset(Non.IDOs.melt.data, variable != 'bidder.rate')\ns2 <- subset(Non.IDOs.melt.data, variable == 'bidder.rate')\n\ns1$panel <- 'Registrants Count'\ns2$panel <- 'Participation Rate (%)'\n\ns <- rbind(s1,s2)\n\nattendance.plot <- ggplot(data = s, mapping = aes(y = value, x = Regular.attendance.cei,colour = variable, fill = variable)) +    \n  facet_grid(panel ~ ., scale = \"free\") +\n  geom_bar(data = s1, position = \"stack\", stat = \"identity\") +  \n  geom_line(data = s2, aes(group=variable)) +\n#   scale_colour_economist() + theme_economist() +\n  theme(axis.title.x = element_text(size=16), axis.title.y = element_text(size=16), title = element_text(size=18), \n        legend.text   = element_text(size=18))  + \n  theme(legend.position=\"top\", legend.key = element_rect(colour = \"black\")) +  # scale_y_continuous(breaks = seq(0,3000,250)) +\n  theme(strip.text = element_text(size=16)) + \n  scale_fill_manual(values=c(\"#FF8533\", \"#1975FF\",\"#2EB82E\"), \n                      name=\"Value\",\n                      breaks=c(\"bidder.cnt\", \"non.bidder.cnt\", \"bidder.rate\"),\n                      labels=c(\"Bidders\", \"Non-Bidders\",\"Rate to be Bidder\")) +\n  scale_colour_manual(values=c(\"#FF8533\", \"#1975FF\",\"#2EB82E\"), \n                    name=\"Value\",\n                    breaks=c(\"bidder.cnt\", \"non.bidder.cnt\", \"bidder.rate\"),\n                    labels=c(\"Bidders\", \"Non-Bidders\", \"Rate to be Bidder\")) +\n  labs(x='Past 60 Days Attendance', title='Past 60 Days Attendance and Participation Rate, REO 2/15/15-3/15/15') \nattendance.plot \n```\n",
    "created" : 1440638175324.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "329562006",
    "id" : "A89FDE20",
    "lastKnownWriteTime" : 1440645230,
    "path" : "C:/Users/Edwin/Desktop/Edwin(10-08-2012)/Work/Auction.com/UserBehavoralAnalysis/UserExploration_20150420.rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "type" : "r_markdown"
}