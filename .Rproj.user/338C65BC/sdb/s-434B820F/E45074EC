{
    "contents" : "ExtractAddrressFields <- function(address.string){\n\n  string.pool <- unlist(strsplit(address.string, c(' ', ',')))\n  string.pool <- gsub('\\\\.', '', string.pool)\n  string.pool <- toupper(string.pool)\n\n  address_obj <- list(Zip = NA,\n    State    = NA,\n    Nbr      = NA,\n    St.Suf   = NA,\n    St.Dr    = NA,\n    St.Name  = NA,\n    Unit.Suf = NA,\n    Unit     = NA,\n    Status   = 'Complete')\n\n\n  Zip.pos   <- length(string.pool) + which(grepl('^([0-9]{5,5})$', string.pool[(length(string.pool)-1):length(string.pool)])) - 2\n  State.pos <- length(string.pool) + which(grepl('^([A-Z]{2,2})$', string.pool[(length(string.pool)-1):length(string.pool)])) - 2\n\n  if(length(Zip.pos) > 0 | length(State.pos) > 0){\n\n    address_obj$Zip   <-  string.pool[Zip.pos]\n    address_obj$State <-  string.pool[State.pos]\n\n    string.pool <- string.pool[-1 * c(State.pos, Zip.pos)]\n\n  }else{\n\n    address_obj$Status  <- 'Cannot find zip code and state'\n    return(address_obj)\n\n  }\n\n  Nbr.pos <- which(grepl('[0-9]+', string.pool[1]))\n\n  if(length(Nbr.pos) > 0){\n\n    ##Street number should not be in the last position because we have to have strings for street name\n\n    if(Nbr.pos > 0 & Nbr.pos < length(string.pool)){\n\n      address_obj$Nbr   <-  string.pool[Nbr.pos]\n    string.pool <- string.pool[-1 * Nbr.pos]\n\n    }\n  }else{\n\n    address_obj$Status <- 'Cannot find street number'\n    return(address_obj)\n\n  }\n\n  Unit.Suf.pos <- which(grepl('^(\\\\#)|((Apt)|(Unit))$', string.pool, ignore.case = TRUE))\n\n  if(length(Unit.Suf.pos) > 0){\n\n    Unit.Suf.pos <- max(Unit.Suf.pos)\n\n    if(Unit.Suf.pos > 0 & Unit.Suf.pos < length(string.pool)){\n\n      address_obj$Unit.Suf <- string.pool[Unit.Suf.pos]\n      Unit.search.string <- string.pool[(Unit.Suf.pos + 1) : length(string.pool)]\n      string.pool <- string.pool[-1 * Unit.Suf.pos : length(string.pool)]\n\n      Unit.pos.flag1 <- grepl('[0-9]+', Unit.search.string)\n      Unit.pos.flag2 <- grepl('^[A-Z]{1,1}$', Unit.search.string)\n      Unit.pos <- which(Unit.pos.flag1 | Unit.pos.flag2)\n\n      address_obj$Unit <- paste(Unit.search.string[Unit.pos], collapse = '')\n\n    }\n  }\n\n  St.Dr.pos  <- which(string.pool %in% street_direction_keywords)\n\n  if(length(St.Dr.pos) > 0){\n\n    St.Dr.pos <- min(St.Dr.pos)\n    address_obj$St.Dr <- string.pool[St.Dr.pos]\n    string.pool <- string.pool[-St.Dr.pos]\n\n  }\n\n  St.Suf.pos <- which(string.pool %in% c(street_suf_keywords$Name, street_suf_keywords$Suffix))\n\n  if(length(St.Suf.pos) > 0){\n\n    St.Suf.pos <- max(St.Suf.pos)\n\n    ##We need to leave at least 1 string for street name\n    if(St.Suf.pos > 1 ){\n\n      address_obj$St.Suf <- string.pool[St.Suf.pos]\n      ##If it is a full name, we convert it to suffix\n      if(sum(street_suf_keywords$Name == address_obj$St.Suf) > 0){\n\n        address_obj$St.Suf <- street_suf_keywords$Suffix[street_suf_keywords$Name == address_obj$St.Suf]\n\n      }\n\n      address_obj$St.Name <- paste(string.pool[1:(St.Suf.pos - 1)], sep = ' ', collapse = ' ')\n\n      string.pool <- string.pool[-1 * (1:St.Suf.pos)]\n\n    }\n  }\n\n  if(is.na(address_obj$St.Suf)){\n\n    address_obj$Status <- 'Cannot find street suffix properly'\n    address_obj$St.Name <- paste(string.pool, sep = ' ', collapse = ' ')\n\n  }\n\n\n  return(address_obj)\n\n}\n\n",
    "created" : 1440475760295.000,
    "dirty" : true,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "1365146573",
    "id" : "E45074EC",
    "lastKnownWriteTime" : 1440647431,
    "path" : "C:/Users/Edwin/Desktop/Edwin(10-08-2012)/Work/Edwin R/USAddressExtract/USAddressExtract/R/ExtractAddressFields.R",
    "project_path" : "R/ExtractAddressFields.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}