{
    "contents" : "# Hello, world!\n#\n# This is an example function named 'hello'\n# which prints 'Hello, world!'.\n#\n# You can learn more about package authoring with RStudio at:\n#\n#   http://r-pkgs.had.co.nz/\n#\n# Some useful keyboard shortcuts for package authoring:\n#\n#   Build and Reload Package:  'Ctrl + Shift + B'\n#   Check Package:             'Ctrl + Shift + E'\n#   Test Package:              'Ctrl + Shift + T'\n\nExtractAddrressFields <- function(address.string) {\n\n#   street_suf_keywords <- read.csv('data\\\\StreetSuffix.csv', header = TRUE, colClasses = rep('character', 2))\n#   street_direction_keywords <- c('East','South', 'West', 'North', 'E', 'S', 'W', 'N', 'NW', 'NE', 'SW', 'SE')\n\n  string.pool <- unlist(strsplit(address.string, c(' ', ',')))\n  string.pool <- gsub('\\\\.', '', string.pool)\n  string.pool <- toupper(string.pool)\n\n  Zip      <- NA\n  State    <- NA\n  Nbr      <- NA\n  St.Suf   <- NA\n  St.Dr    <- NA\n  St.Name  <- NA\n  Unit.Suf <- NA\n  Unit     <- NA\n\n  Zip.pos   <- length(string.pool) + which(grepl('^([0-9]{5,5})$', string.pool[(length(string.pool)-1):length(string.pool)])) - 2\n  State.pos <- length(string.pool) + which(grepl('^([A-Z]{2,2})$', string.pool[(length(string.pool)-1):length(string.pool)])) - 2\n\n  if(length(Zip.pos) > 0 | length(State.pos) > 0){\n\n    Zip   <-  string.pool[Zip.pos]\n    State <-  string.pool[State.pos]\n\n    string.pool <- string.pool[-1 * c(State.pos, Zip.pos)]\n\n  }else{\n\n    print('Cannot find Zip and State')\n    return(NULL)\n\n  }\n\n  Nbr.pos <- which(grepl('^[0-9]+', string.pool[1]))\n\n  if(length(Nbr.pos) > 0){\n    if(Nbr.pos > 0){\n\n    Nbr   <-  string.pool[Nbr.pos]\n    string.pool <- string.pool[-1 * Nbr.pos]\n\n    }\n  }else{\n\n    print('Cannot find Street Number')\n    return(NULL)\n\n  }\n\n  Unit.Suf.pos <- which(grepl('^((Apt)|(Unit))$', string.pool, ignore.case = TRUE))\n\n  if(length(Unit.Suf.pos) > 0){\n    if(Unit.Suf.pos > 0 & Unit.Suf.pos < length(string.pool)){\n\n      Unit.pos <- (Unit.Suf.pos + 1) : length(string.pool)\n\n      Unit.Suf <- string.pool[Unit.Suf.pos]\n      Unit     <- string.pool[Unit.pos]\n\n      string.pool <- string.pool[-1 * c(Unit.Suf.pos, Unit.pos)]\n\n    }\n  }\n\n  St.Suf.pos <- max(which(string.pool %in% c(street_suf_keywords$Name, street_suf_keywords$Suffix)))\n\n  if(length(St.Suf.pos) > 0){\n    if(St.Suf.pos == length(string.pool)){\n\n      St.Suf <- string.pool[St.Suf.pos]\n      string.pool <- string.pool[-St.Suf.pos]\n\n      St.Dr.pos <- which(string.pool %in% street_direction_keywords)\n\n      if(length(St.Dr.pos) > 0){\n        if(St.Dr.pos > 0){\n\n        St.Dr <- string.pool[St.Dr.pos]\n        string.pool <- string.pool[-St.Dr.pos]\n\n        }\n      }\n\n      St.Name <- paste(string.pool, sep = ' ', collapse = ' ')\n    }\n\n  }else{\n\n    print('Cannot find street name properly.')\n    St.Name <- paste(string.pool, sep = ' ', collapse = ' ')\n\n  }\n\n  address_obj <- list(Zip = Zip,\n    State    = State,\n    Nbr      = Nbr,\n    St.Suf   = St.Suf,\n    St.Dr    = St.Dr,\n    St.Name  = St.Name,\n    Unit.Suf = Unit.Suf,\n    Unit     = Unit)\n\n\n\n#   nbr.reg   <- gregexpr('^([0-9])+', target.addr$Address[i])\n#   nbr.match <- unlist(regmatches(target.addr$Address[i], nbr.reg))\n#\n#   #nbr.flag <- grepl('^([0-9])+', target.addr$Address[i])\n#\n#   if(length(nbr.match) == 1){\n#     target.addr$Nbr[i]  <- nbr.match[1]\n#   }\n#\n#   zip.reg   <- gregexpr('([0-9]{5,5})$', target.addr$Address[i])\n#   zip.match <- unlist(regmatches(target.addr$Address[i], zip.reg))\n#   #zip.flag <- grepl('([0-9]{5,5})$', target.addr$Address[i])\n#\n#   if(length(zip.match) == 1){\n#     target.addr$Zip[i]  <- zip.match\n#   }\n#\n#   st.reg     <- gregexpr('\\\\s([A-Za-z0-9]+)', target.addr$Address[i])\n#   st.matches <- unlist(regmatches(target.addr$Address[i], st.reg))\n#   st.matches <- gsub('\\\\s', '', st.matches)\n#   #st.name.flag <- grepl('\\\\s([A-Za-z]{3,99})', target.addr$Address[i])\n#\n#\n#   if(length(st.matches) >= 1){\n#     target.addr$St.Name[i]  <- st.matches[1]\n#   }\n#\n#   if(length(st.matches) >= 2){\n#\n#     if(grepl('((^East$)|(^South$)|(^West$)|(^North$)|(^E\\\\.$)|(^S\\\\.$)|(^W\\\\.$)|(^N\\\\.$)|(^E$)|(^S$)|(^W$)|(^N$))|(^NW$)|(^NE$)|(^SW$)|(^SE$))', st.matches[1], ignore.case = TRUE)) {\n#\n#       target.addr$St.Dr[i]    <- st.matches[1]\n#       target.addr$St.Name[i]  <- st.matches[2]\n#\n#     }\n#   }\n#\n#   if(is.na(target.addr$St.Dr[i])){\n#\n#     if(grepl('^((Way)|(Ln)|(Lane)|(Street)|(St)|(Rd)|(Road)|(Ave)|(Pl)|(Ctr)|(Dr)|(Drive)|(Court)|(AVENUE))$', st.matches[2], ignore.case = TRUE)){\n#       target.addr$St.Suf[i]  <- st.matches[2]\n#     }else if(grepl('^((Way)|(Ln)|(Lane)|(Street)|(St)|(Rd)|(Road)|(Ave)|(Pl)|(Ctr)|(Dr)|(Drive)|(Court)|(AVENUE))$', st.matches[3], ignore.case = TRUE)){\n#\n#       target.addr$St.Name[i] <- paste(st.matches[1], st.matches[2])\n#       target.addr$St.Suf[i]  <- st.matches[3]\n#\n#     }\n#\n#   }else{\n#\n#     if(grepl('^((Way)|(Ln)|(Lane)|(Street)|(St)|(Rd)|(Road)|(Ave)|(Pl)|(Ctr)|(Dr)|(Drive)|(Court)|(AVENUE))$', st.matches[3], ignore.case = TRUE)){\n#       target.addr$St.Suf[i]  <- st.matches[3]\n#     }else if(grepl('^((Way)|(Ln)|(Lane)|(Street)|(St)|(Rd)|(Road)|(Ave)|(Pl)|(Ctr)|(Dr)|(Drive)|(Court)|(AVENUE))$', st.matches[4], ignore.case = TRUE)){\n#\n#       target.addr$St.Name[i] <- paste(st.matches[2], st.matches[3])\n#       target.addr$St.Suf[i]  <- st.matches[4]\n#\n#     }\n#   }\n#\n#   potential.unit <- grep('^([0-9]+)$', st.matches, value = TRUE)\n#   if(length(potential.unit)> 1){\n#     #2nd one must be the zip code\n#     target.addr$Unit[i] <- potential.unit[1]\n#   }\n\n  return(address_obj)\n\n}\n",
    "created" : 1440475760295.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "1814565117",
    "id" : "E45074EC",
    "lastKnownWriteTime" : 1440545687,
    "path" : "C:/Users/Edwin/Desktop/Edwin(10-08-2012)/Work/Edwin R/USAddressExtract/USAddressExtract/R/ExtractAddressFields.R",
    "project_path" : "R/ExtractAddressFields.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}