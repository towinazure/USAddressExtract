{
    "contents" : "rm(list=ls())\nlibrary(USAddressExtract)\nlibrary(dplyr)\nsetwd('C:\\\\Users\\\\Edwin\\\\Desktop\\\\Edwin(10-08-2012)\\\\Work\\\\Auction.com\\\\BayView Public Record Matching')\n\n# rt.raw <- read.csv('rt_raw.csv',header=FALSE)\n# rt.raw$V1 <- gsub(\"\\\\(\", \"\", rt.raw$V1)\n# rt.raw$V14 <- gsub(\"\\\\)\", \"\", rt.raw$V14)\n# names(rt.raw) <- c('Tran.Date', 'Sr.Prop.Id','Use.Code','Dis.Ind','Lndr.Name','Lndr.Type','Addr.Nbr',\n#                    'Addr.Fr','Addr.Dir','Addr.St','Addr.St.Suf','Addr.City', 'Addr.Zip','Addr.State')\n#\n# head(rt.raw)\n#\n# rt.raw$Dis.Ind <- as.character(rt.raw$Dis.Ind)\n# rt.raw$Lndr.Name <- as.character(rt.raw$Lndr.Name)\n# rt.raw$Addr.Zip <- as.character(rt.raw$Addr.Zip)\n# rt.raw$Addr.State <- as.character(rt.raw$Addr.State)\n# rt.raw$Addr.Nbr <- as.character(rt.raw$Addr.Nbr)\n# rt.raw$Addr.Dir  <- as.character(rt.raw$Addr.Dir )\n# rt.raw$Addr.St <- as.character(rt.raw$Addr.St)\n# rt.raw$Addr.St.Suf <- as.character(rt.raw$Addr.St.Suf)\n#\n# rt.raw <- subset(rt.raw, Addr.Nbr  != \"\")\n# rt.raw <- subset(rt.raw, Addr.St   != \"\")\n# # rt.raw <- subset(rt.raw, Lndr.Name != \"\")\n# rt.raw <- subset(rt.raw, Addr.Zip != \"\")\n# rt.raw <- rt.raw[nchar(rt.raw$Addr.St) > 1, ]\n# # rt.raw <- rt.raw[grepl(\"^R+.*\", rt.raw$Use.Code) | rt.raw$Use.Code == '', ]\n\n\ntarget.addr <- read.csv('FannieMae.csv')\ntarget.addr$new.zip <- NA\n\nzero.to.fill <- 5 - nchar(target.addr$zip)\nfor(i in 1:nrow(target.addr)){\n\n  if(zero.to.fill[i] > 0){\n    target.addr$new.zip[i] <- paste(rep(0, zero.to.fill[i]), target.addr$zip[i], sep = \"\")\n  }else{\n    target.addr$new.zip[i] <- as.character(target.addr$zip[i])\n  }\n\n}\n\n\ntarget.addr$state <- as.character(target.addr$state)\n\ntarget.addr$county <- as.character(target.addr$county)\ntarget.addr$county <- gsub('\\\\n','', target.addr$county)\n\ntarget.addr$city <- as.character(target.addr$city)\n\ntarget.addr$street <- as.character(target.addr$street)\ntarget.addr$street <- gsub('\\\\n','', target.addr$street)\n\ntarget.addr$property.type <- as.character(target.addr$property.type)\ntarget.addr$property.type <- gsub('\\\\n','', target.addr$property.type)\n\ntarget.addr$Address <- paste(target.addr$street,  target.addr$state, target.addr$new.zip)\ntarget.addr$Address <- gsub('\\\\s$', '', target.addr$Address) #Trim the end\n\ntarget.addr$Zip <- NA\ntarget.addr$Nbr <- NA\ntarget.addr$St.Name <- NA\ntarget.addr$St.Dr <- NA\ntarget.addr$St.Suf <- NA\ntarget.addr$Unit <- NA\n\n# for(i in 1:nrow(target.addr)){\n#\n# #   nbr      <- NA\n# #   st.name  <- NA\n# #   Zip      <- NA\n#\n#\n#   nbr.reg   <- gregexpr('^([0-9])+', target.addr$Address[i])\n#   nbr.match <- unlist(regmatches(target.addr$Address[i], nbr.reg))\n#\n#   #nbr.flag <- grepl('^([0-9])+', target.addr$Address[i])\n#\n#   if(length(nbr.match) == 1){\n#     target.addr$Nbr[i]  <-nbr.match[1]\n#   }\n#\n#   zip.reg   <- gregexpr('([0-9]{5,5})$', target.addr$Address[i])\n#   zip.match <- unlist(regmatches(target.addr$Address[i], zip.reg))\n#   #zip.flag <- grepl('([0-9]{5,5})$', target.addr$Address[i])\n#\n#   if(length(zip.match) == 1){\n#     target.addr$Zip[i]  <- zip.match\n#   }\n#\n#   st.reg     <- gregexpr('\\\\s([A-Za-z0-9]+)', target.addr$Address[i])\n#   st.matches <- unlist(regmatches(target.addr$Address[i], st.reg))\n#   st.matches <- gsub('\\\\s', '', st.matches)\n#   #st.name.flag <- grepl('\\\\s([A-Za-z]{3,99})', target.addr$Address[i])\n#\n#\n#   if(length(st.matches) >= 1){\n#     target.addr$St.Name[i]  <- st.matches[1]\n#   }\n#\n#   if(length(st.matches) >= 2){\n#\n#     if(grepl('((^East$)|(^South$)|(^West$)|(^North$)|(^E\\\\.$)|(^S\\\\.$)|(^W\\\\.$)|(^N\\\\.$)|(^E$)|(^S$)|(^W$)|(^N$))|(^NW$)|(^NE$)|(^SW$)|(^SE$))', st.matches[1], ignore.case = TRUE)) {\n#\n#       target.addr$St.Dr[i]    <- st.matches[1]\n#       target.addr$St.Name[i]  <- st.matches[2]\n#\n#     }\n#   }\n#\n#   if(is.na(target.addr$St.Dr[i])){\n#\n#     if(grepl('^((Way)|(Ln)|(Lane)|(Street)|(St)|(Rd)|(Road)|(Ave)|(Pl)|(Ctr)|(Dr)|(Drive)|(Court)|(AVENUE))$', st.matches[2], ignore.case = TRUE)){\n#       target.addr$St.Suf[i]  <- st.matches[2]\n#     }else if(grepl('^((Way)|(Ln)|(Lane)|(Street)|(St)|(Rd)|(Road)|(Ave)|(Pl)|(Ctr)|(Dr)|(Drive)|(Court)|(AVENUE))$', st.matches[3], ignore.case = TRUE)){\n#\n#       target.addr$St.Name[i] <- paste(st.matches[1], st.matches[2])\n#       target.addr$St.Suf[i]  <- st.matches[3]\n#\n#     }\n#\n#   }else{\n#\n#     if(grepl('^((Way)|(Ln)|(Lane)|(Street)|(St)|(Rd)|(Road)|(Ave)|(Pl)|(Ctr)|(Dr)|(Drive)|(Court)|(AVENUE))$', st.matches[3], ignore.case = TRUE)){\n#       target.addr$St.Suf[i]  <- st.matches[3]\n#     }else if(grepl('^((Way)|(Ln)|(Lane)|(Street)|(St)|(Rd)|(Road)|(Ave)|(Pl)|(Ctr)|(Dr)|(Drive)|(Court)|(AVENUE))$', st.matches[4], ignore.case = TRUE)){\n#\n#       target.addr$St.Name[i] <- paste(st.matches[2], st.matches[3])\n#       target.addr$St.Suf[i]  <- st.matches[4]\n#\n#     }\n#   }\n#\n#\n#   potential.unit <- grep('^([0-9]+)$', st.matches, value = TRUE)\n#   if(length(potential.unit)> 1){\n#     #2nd one must be the zip code\n#     target.addr$Unit[i] <- potential.unit[1]\n#   }\n# }\n\n# target.addr$Address <- gsub(',', '', target.addr$Address )\n\n##testing\nsetwd('C:\\\\Users\\\\Edwin\\\\Desktop\\\\Edwin(10-08-2012)\\\\Work\\\\Edwin R\\\\USAddressExtract\\\\USAddressExtract\\\\R')\nsource('ExtractAddressFields.R')\naddress.string <- target.addr$Address[i]\nExtractAddrressFields(target.addr$Address[20])\n\n\naddr.database <- read.csv('EDW_Data.csv', header = TRUE)\nnames(addr.database) <- gsub('[^a-z]\\\\.\\\\.', \"\", x = names(addr.database) ) #getting rid of crazy naming\n\naddr.database <- addr.database[grepl('Fannie Mae', addr.database$SellerName, ignore.case = TRUE),]\naddr.database$ParsedAddress <- as.character(addr.database$ParsedAddress)\naddr.database$ParsedSuite <- as.character(addr.database$ParsedSuite)\naddr.database$SellerName <- as.character(addr.database$SellerName)\naddr.database$AuctionStatus <- as.character(addr.database$AuctionStatus)\naddr.database$AuctionDate <- as.Date(as.character(addr.database$AuctionDate), format = '%Y-%m-%d')\naddr.database$PropertyState <- as.character(addr.database$PropertyState)\naddr.database$Reserve <- as.numeric(as.character(addr.database$Reserve))\naddr.database$ParsedCity <- as.character(addr.database$ParsedCity)\n\naddr.database$new.zip[addr.database$ParsedZip <= 9999] <-\n  as.character(paste(0, addr.database$ParsedZip[addr.database$ParsedZip <= 9999] , sep=\"\"))\naddr.database$new.zip[addr.database$ParsedZip <= 999] <-\n  as.character(paste(0,0, addr.database$ParsedZip[addr.database$ParsedZip <= 999] , sep=\"\"))\naddr.database$new.zip[addr.database$ParsedZip > 9999] <- as.character((addr.database$ParsedZip[addr.database$ParsedZip > 9999]))\n\n# write.csv(x=target.addr, file = 'HomeSearchRefine.csv', row.names=TRUE)\n\n\n# rt.matches$V1 <- gsub(\"\\\\(\", \"\", rt.matches$V1)\n# rt.matches$V24 <- gsub(\"\\\\)\", \"\", rt.matches$V24)\n\n\n# names(addr.database) <- c('rid','Address','Nbr','St.Name','St.Dr','St.Suf','Unit','Zip',\n#                        'Tran.Date', 'Sr.Prop.Id','Use.Code','Dis.Ind',\n#                        'Lndr.Name','Lndr.Type','rt.Nbr',\n#                     'rt.Fr','rt.Dir','rt.St.Name','rt.St.Suf',\n#                     'rt.Unit.Pre','rt.Unit',\n#                     'rt.City', 'rt.Zip','rt.State')\n# for(i in 2:ncol(rt.matches)){rt.matches[,i] <- as.character(rt.matches[,i])}\n#\n#   out.set <- NULL\n#   for(i in 1:nrow(rt.matches)){\n#\n#     keep.it <- TRUE\n#\n#     if(!grepl(rt.matches$St.Name[i], rt.matches$rt.St.Name[i], ignore.case=TRUE )){\n#       keep.it <- FALSE\n#     }\n#\n#     if(!is.na(rt.matches$Unit[i])){\n#       if(rt.matches$Unit[i] != rt.matches$rt.Unit[i]){\n#         keep.it <- FALSE\n#       }\n#     }\n#\n#     if(keep.it){\n#       out.set <- rbind(out.set, rt.matches[i,] )\n#     }\n#\n# }\n\nout.set <- addr.database\nout.set$match.row_id <- NA\nstart.time <- Sys.time()\nfor(i in 1:nrow(addr.database)){\n\n    k <- which(unlist(lapply(target.addr$city, FUN = grepl, addr.database$ParsedCity[i], ignore.case = TRUE)) &\n    unlist(lapply(target.addr$Nbr, FUN = grepl, addr.database$ParsedAddress[i], ignore.case = TRUE)) &\n    unlist(lapply(target.addr$new.zip, FUN = grepl, addr.database$new.zip[i], ignore.case = TRUE)))\n\n    if(length(k) > 0){\n\n      out.set$match.row_id[i] <- toString(target.addr$row_id[k], sep = ',')\n    }\n\n    if(i %% 10 == 0 ){\n\n      current.time <- Sys.time()\n      elapsed <- round(as.numeric(difftime(current.time, start.time, units = \"mins\")), 1)\n      print(paste(\"Processed\", i, \"rows,\", elapsed,  \"minutes elapsed.\", sep = \" \"))\n\n    }\n}\n\nout.matched.set <- out.set %>% filter(!is.na(match.row_id))\n\n# out.set.latest <- out.set %>% group_by(Address) %>% mutate(rn = n() - row_number(Tran.Date)) %>% filter(rn == 0)\n# out.final <- out.set.latest[,names(out.set.latest) %in% c('rid','Address','Tran.Date','Sr.Prop.Id',\n#                                                           'Use.Code','Dis.Ind',\n#                                                           'Lndr.Name','Lndr.Type','rt.Nbr',\n#                                                           'rt.Fr','rt.Dir','rt.St.Name','rt.St.Suf',\n#                                                           'rt.Unit.Pre','rt.Unit',\n#                                                           'rt.City', 'rt.Zip','rt.State')]\n\nwrite.csv(out.set, 'output.csv',row.names = FALSE)\n\n# rt.raw <- read.csv('rt_raw.csv',header=FALSE)\n\n\n##Steps below skipped to use Hadoop\n\n# out.set <- NULL\n# for(i in 1:nrow(target.addr)){\n#\n#   nbr.flag   <- rt.raw$Addr.Nbr == target.addr$Nbr[i]\n#   # state.flag <- rt.raw$Addr.State == 'NV'\n#   zip.flag <- rt.raw$Addr.Zip == target.addr$Zip[i]\n#\n#   rt.subset <- rt.raw[  nbr.flag & zip.flag, ]\n#\n# #   x <- letters\n# #   st.name.flag <- sapply(x,  FUN = grepl, 'bab', ignore.case = TRUE)\n#   if(nrow(rt.subset)>0){\n#     st.name.flag <- sapply(rt.subset$Addr.St,  FUN = grepl, target.addr$St.Name[i], ignore.case = TRUE)\n#\n#     rt.subset <- rt.subset[st.name.flag, ]\n#\n#     if(nrow(rt.subset)>0){\n#\n#       out.subset <- cbind(target.addr[rep(i,nrow(rt.subset)),], rt.subset)\n#       out.set <- rbind(out.set, out.subset)\n#     }\n#\n#   }\n# }\n#\n# out.final.set <- out.set %>% group_by(Address) %>% mutate(rn = n() - row_number(Tran.Date)) %>% filter(rn == 0)\n#\n# write.csv(x=out.set, file = 'HomeSearchLenders.csv',row.names=FALSE)\n\n\n\n\n\n#   st.zip.match <- gregexpr('([0-9]+)$', target.addr$Address)\n#   st.zip.flag <- grepl('([0-9])+$', target.addr$Address)\n#\n#   target.addr$trg.Zip <- NA\n#   target.addr$trg.Zip[st.zip.flag]  <- unlist(regmatches(target.addr$Address, st.zip.match))\n#\n#   st.name.match <- gregexpr('\\\\s([A-Za-z]+)', target.addr$Address)\n#   st.name.flag <- grepl('\\\\s([A-Za-z]+)', target.addr$Address)\n#\n#   unlist(regmatches(target.addr$Address, st.name.match))\n\n\n\n\n# rt.raw$Tran.Date <- as.Date(rt.raw$Tran.Date, format='%Y%m%d')\n#\n#\n#\n# rt.raw <- subset(rt.raw, Dis.Ind %in% c('A'))\n#\n# head(rt.raw)\n#\n#\n# rt.lndr.tps <- subset(rt.raw, Dis.Ind %in% c('A'))\n#\n#\n#\n# lndr.cnt <- rt.lndr.tps %>% group_by(Lndr.Name, State, Tran.Date) %>%\n#   summarise(cnt = n()) %>%\n#   arrange(desc(cnt)) %>%\n#   filter(Lndr.Name != '')\n#\n# write.csv(x=lndr.cnt, file = 'rt_tps_lender_cnt.csv', row.names = FALSE)\n",
    "created" : 1440544214858.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "698711514",
    "id" : "A9A97808",
    "lastKnownWriteTime" : 1440546295,
    "path" : "C:/Users/Edwin/Desktop/Edwin(10-08-2012)/Work/Auction.com/BayView Public Record Matching/address_matching.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}