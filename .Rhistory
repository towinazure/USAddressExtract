target.addr$county <- gsub('\\n','', target.addr$county)
target.addr$city <- as.character(target.addr$city)
target.addr$street <- as.character(target.addr$street)
target.addr$street <- gsub('\\n','', target.addr$street)
target.addr$property.type <- as.character(target.addr$property.type)
target.addr$property.type <- gsub('\\n','', target.addr$property.type)
target.addr$Address <- paste(target.addr$street,  target.addr$state, target.addr$new.zip)
target.addr$Address <- gsub('\\s$', '', target.addr$Address) #Trim the end
##testing
# setwd('C:\\Users\\Edwin\\Desktop\\Edwin(10-08-2012)\\Work\\Edwin R\\USAddressExtract\\USAddressExtract\\R')
# source('ExtractAddressFields.R')
target.addr.new <- target.addr[, c('row_id', 'Address')]
target.addr.new$Zip             <- NA
target.addr.new$State           <- NA
target.addr.new$Nbr             <- NA
target.addr.new$St.Suf          <- NA
target.addr.new$St.Dr           <- NA
target.addr.new$St.Name         <- NA
target.addr.new$Unit.Suf        <- NA
target.addr.new$Unit            <- NA
target.addr.new$Process.Status  <- NA
for(i in 1:nrow(target.addr)){
x <- ExtractAddrressFields(target.addr$Address[i])
if(!is.null(x)){
target.addr.new$Zip[i]             <- x$Zip
target.addr.new$State[i]           <- x$State
target.addr.new$Nbr[i]             <- x$Nbr
target.addr.new$St.Suf[i]          <- x$St.Suf
target.addr.new$St.Dr[i]           <- x$St.Dr
target.addr.new$St.Name[i]         <- x$St.Name
target.addr.new$Unit.Suf[i]        <- x$Unit.Suf
target.addr.new$Unit[i]            <- x$Unit
target.addr.new$Process.Status[i]  <- x$Status
}
}
target.addr.new.missed <- target.addr.new %>% filter(Process.Status == 'Cannot find street suffix properly')
View(target.addr.new.missed)
library(USAddressExtract)
rm(list=ls())
library(USAddressExtract)
library(dplyr)
setwd('C:\\Users\\Edwin\\Desktop\\Edwin(10-08-2012)\\Work\\Auction.com\\BayView Public Record Matching')
target.addr <- read.csv('FannieMae.csv')
target.addr$new.zip <- NA
zero.to.fill <- 5 - nchar(target.addr$zip)
for(i in 1:nrow(target.addr)){
if(zero.to.fill[i] > 0){
target.addr$new.zip[i] <- paste(rep(0, zero.to.fill[i]), target.addr$zip[i], sep = "")
}else{
target.addr$new.zip[i] <- as.character(target.addr$zip[i])
}
}
target.addr$state <- as.character(target.addr$state)
target.addr$county <- as.character(target.addr$county)
target.addr$county <- gsub('\\n','', target.addr$county)
target.addr$city <- as.character(target.addr$city)
target.addr$street <- as.character(target.addr$street)
target.addr$street <- gsub('\\n','', target.addr$street)
target.addr$property.type <- as.character(target.addr$property.type)
target.addr$property.type <- gsub('\\n','', target.addr$property.type)
target.addr$Address <- paste(target.addr$street,  target.addr$state, target.addr$new.zip)
target.addr$Address <- gsub('\\s$', '', target.addr$Address) #Trim the end
##testing
# setwd('C:\\Users\\Edwin\\Desktop\\Edwin(10-08-2012)\\Work\\Edwin R\\USAddressExtract\\USAddressExtract\\R')
# source('ExtractAddressFields.R')
target.addr.new <- target.addr[, c('row_id', 'Address')]
target.addr.new$Zip             <- NA
target.addr.new$State           <- NA
target.addr.new$Nbr             <- NA
target.addr.new$St.Suf          <- NA
target.addr.new$St.Dr           <- NA
target.addr.new$St.Name         <- NA
target.addr.new$Unit.Suf        <- NA
target.addr.new$Unit            <- NA
target.addr.new$Process.Status  <- NA
for(i in 1:nrow(target.addr)){
x <- ExtractAddrressFields(target.addr$Address[i])
if(!is.null(x)){
target.addr.new$Zip[i]             <- x$Zip
target.addr.new$State[i]           <- x$State
target.addr.new$Nbr[i]             <- x$Nbr
target.addr.new$St.Suf[i]          <- x$St.Suf
target.addr.new$St.Dr[i]           <- x$St.Dr
target.addr.new$St.Name[i]         <- x$St.Name
target.addr.new$Unit.Suf[i]        <- x$Unit.Suf
target.addr.new$Unit[i]            <- x$Unit
target.addr.new$Process.Status[i]  <- x$Status
}
}
target.addr.new.missed <- target.addr.new %>% filter(Process.Status == 'Cannot find street suffix properly')
library(USAddressExtract)
rm(list=ls())
library(USAddressExtract)
library(dplyr)
setwd('C:\\Users\\Edwin\\Desktop\\Edwin(10-08-2012)\\Work\\Auction.com\\BayView Public Record Matching')
target.addr <- read.csv('FannieMae.csv')
target.addr$new.zip <- NA
zero.to.fill <- 5 - nchar(target.addr$zip)
for(i in 1:nrow(target.addr)){
if(zero.to.fill[i] > 0){
target.addr$new.zip[i] <- paste(rep(0, zero.to.fill[i]), target.addr$zip[i], sep = "")
}else{
target.addr$new.zip[i] <- as.character(target.addr$zip[i])
}
}
target.addr$state <- as.character(target.addr$state)
target.addr$county <- as.character(target.addr$county)
target.addr$county <- gsub('\\n','', target.addr$county)
target.addr$city <- as.character(target.addr$city)
target.addr$street <- as.character(target.addr$street)
target.addr$street <- gsub('\\n','', target.addr$street)
target.addr$property.type <- as.character(target.addr$property.type)
target.addr$property.type <- gsub('\\n','', target.addr$property.type)
target.addr$Address <- paste(target.addr$street,  target.addr$state, target.addr$new.zip)
target.addr$Address <- gsub('\\s$', '', target.addr$Address) #Trim the end
##testing
# setwd('C:\\Users\\Edwin\\Desktop\\Edwin(10-08-2012)\\Work\\Edwin R\\USAddressExtract\\USAddressExtract\\R')
# source('ExtractAddressFields.R')
target.addr.new <- target.addr[, c('row_id', 'Address')]
target.addr.new$Zip             <- NA
target.addr.new$State           <- NA
target.addr.new$Nbr             <- NA
target.addr.new$St.Suf          <- NA
target.addr.new$St.Dr           <- NA
target.addr.new$St.Name         <- NA
target.addr.new$Unit.Suf        <- NA
target.addr.new$Unit            <- NA
target.addr.new$Process.Status  <- NA
for(i in 1:nrow(target.addr)){
x <- ExtractAddrressFields(target.addr$Address[i])
if(!is.null(x)){
target.addr.new$Zip[i]             <- x$Zip
target.addr.new$State[i]           <- x$State
target.addr.new$Nbr[i]             <- x$Nbr
target.addr.new$St.Suf[i]          <- x$St.Suf
target.addr.new$St.Dr[i]           <- x$St.Dr
target.addr.new$St.Name[i]         <- x$St.Name
target.addr.new$Unit.Suf[i]        <- x$Unit.Suf
target.addr.new$Unit[i]            <- x$Unit
target.addr.new$Process.Status[i]  <- x$Status
}
}
target.addr.new.missed <- target.addr.new %>% filter(Process.Status == 'Cannot find street suffix properly')
library(USAddressExtract)
rm(list=ls())
library(USAddressExtract)
library(dplyr)
setwd('C:\\Users\\Edwin\\Desktop\\Edwin(10-08-2012)\\Work\\Auction.com\\BayView Public Record Matching')
target.addr <- read.csv('FannieMae.csv')
target.addr$new.zip <- NA
zero.to.fill <- 5 - nchar(target.addr$zip)
for(i in 1:nrow(target.addr)){
if(zero.to.fill[i] > 0){
target.addr$new.zip[i] <- paste(rep(0, zero.to.fill[i]), target.addr$zip[i], sep = "")
}else{
target.addr$new.zip[i] <- as.character(target.addr$zip[i])
}
}
target.addr$state <- as.character(target.addr$state)
target.addr$county <- as.character(target.addr$county)
target.addr$county <- gsub('\\n','', target.addr$county)
target.addr$city <- as.character(target.addr$city)
target.addr$street <- as.character(target.addr$street)
target.addr$street <- gsub('\\n','', target.addr$street)
target.addr$property.type <- as.character(target.addr$property.type)
target.addr$property.type <- gsub('\\n','', target.addr$property.type)
target.addr$Address <- paste(target.addr$street,  target.addr$state, target.addr$new.zip)
target.addr$Address <- gsub('\\s$', '', target.addr$Address) #Trim the end
##testing
# setwd('C:\\Users\\Edwin\\Desktop\\Edwin(10-08-2012)\\Work\\Edwin R\\USAddressExtract\\USAddressExtract\\R')
# source('ExtractAddressFields.R')
target.addr.new <- target.addr[, c('row_id', 'Address')]
target.addr.new$Zip             <- NA
target.addr.new$State           <- NA
target.addr.new$Nbr             <- NA
target.addr.new$St.Suf          <- NA
target.addr.new$St.Dr           <- NA
target.addr.new$St.Name         <- NA
target.addr.new$Unit.Suf        <- NA
target.addr.new$Unit            <- NA
target.addr.new$Process.Status  <- NA
for(i in 1:nrow(target.addr)){
x <- ExtractAddrressFields(target.addr$Address[i])
if(!is.null(x)){
target.addr.new$Zip[i]             <- x$Zip
target.addr.new$State[i]           <- x$State
target.addr.new$Nbr[i]             <- x$Nbr
target.addr.new$St.Suf[i]          <- x$St.Suf
target.addr.new$St.Dr[i]           <- x$St.Dr
target.addr.new$St.Name[i]         <- x$St.Name
target.addr.new$Unit.Suf[i]        <- x$Unit.Suf
target.addr.new$Unit[i]            <- x$Unit
target.addr.new$Process.Status[i]  <- x$Status
}
}
target.addr.new.missed <- target.addr.new %>% filter(Process.Status == 'Cannot find street suffix properly')
View(target.addr.new.missed)
library(USAddressExtract)
rm(list=ls())
library(USAddressExtract)
library(dplyr)
setwd('C:\\Users\\Edwin\\Desktop\\Edwin(10-08-2012)\\Work\\Auction.com\\BayView Public Record Matching')
target.addr <- read.csv('FannieMae.csv')
target.addr$new.zip <- NA
zero.to.fill <- 5 - nchar(target.addr$zip)
for(i in 1:nrow(target.addr)){
if(zero.to.fill[i] > 0){
target.addr$new.zip[i] <- paste(rep(0, zero.to.fill[i]), target.addr$zip[i], sep = "")
}else{
target.addr$new.zip[i] <- as.character(target.addr$zip[i])
}
}
target.addr$state <- as.character(target.addr$state)
target.addr$county <- as.character(target.addr$county)
target.addr$county <- gsub('\\n','', target.addr$county)
target.addr$city <- as.character(target.addr$city)
target.addr$street <- as.character(target.addr$street)
target.addr$street <- gsub('\\n','', target.addr$street)
target.addr$property.type <- as.character(target.addr$property.type)
target.addr$property.type <- gsub('\\n','', target.addr$property.type)
target.addr$Address <- paste(target.addr$street,  target.addr$state, target.addr$new.zip)
target.addr$Address <- gsub('\\s$', '', target.addr$Address) #Trim the end
##testing
# setwd('C:\\Users\\Edwin\\Desktop\\Edwin(10-08-2012)\\Work\\Edwin R\\USAddressExtract\\USAddressExtract\\R')
# source('ExtractAddressFields.R')
target.addr.new <- target.addr[, c('row_id', 'Address')]
target.addr.new$Zip             <- NA
target.addr.new$State           <- NA
target.addr.new$Nbr             <- NA
target.addr.new$St.Suf          <- NA
target.addr.new$St.Dr           <- NA
target.addr.new$St.Name         <- NA
target.addr.new$Unit.Suf        <- NA
target.addr.new$Unit            <- NA
target.addr.new$Process.Status  <- NA
for(i in 1:nrow(target.addr)){
x <- ExtractAddrressFields(target.addr$Address[i])
if(!is.null(x)){
target.addr.new$Zip[i]             <- x$Zip
target.addr.new$State[i]           <- x$State
target.addr.new$Nbr[i]             <- x$Nbr
target.addr.new$St.Suf[i]          <- x$St.Suf
target.addr.new$St.Dr[i]           <- x$St.Dr
target.addr.new$St.Name[i]         <- x$St.Name
target.addr.new$Unit.Suf[i]        <- x$Unit.Suf
target.addr.new$Unit[i]            <- x$Unit
target.addr.new$Process.Status[i]  <- x$Status
}
}
target.addr.new.missed <- target.addr.new %>% filter(Process.Status == 'Cannot find street suffix properly')
View(target.addr.new.missed)
View(target.addr.new)
addr.database <- read.csv('EDW_Data.csv', header = TRUE)
names(addr.database) <- gsub('[^a-z]\\.\\.', "", x = names(addr.database) ) #getting rid of crazy naming
View(addr.database)
View(addr.database)
library(USAddressExtract)
rm(list=ls())
library(USAddressExtract)
library(dplyr)
setwd('C:\\Users\\Edwin\\Desktop\\Edwin(10-08-2012)\\Work\\Auction.com\\BayView Public Record Matching')
target.addr <- read.csv('FannieMae.csv')
target.addr$new.zip <- NA
zero.to.fill <- 5 - nchar(target.addr$zip)
for(i in 1:nrow(target.addr)){
if(zero.to.fill[i] > 0){
target.addr$new.zip[i] <- paste(rep(0, zero.to.fill[i]), target.addr$zip[i], sep = "")
}else{
target.addr$new.zip[i] <- as.character(target.addr$zip[i])
}
}
target.addr$state <- as.character(target.addr$state)
target.addr$county <- as.character(target.addr$county)
target.addr$county <- gsub('\\n','', target.addr$county)
target.addr$city <- as.character(target.addr$city)
target.addr$street <- as.character(target.addr$street)
target.addr$street <- gsub('\\n','', target.addr$street)
target.addr$property.type <- as.character(target.addr$property.type)
target.addr$property.type <- gsub('\\n','', target.addr$property.type)
target.addr$Address <- paste(target.addr$street,  target.addr$state, target.addr$new.zip)
target.addr$Address <- gsub('\\s$', '', target.addr$Address) #Trim the end
##testing
# setwd('C:\\Users\\Edwin\\Desktop\\Edwin(10-08-2012)\\Work\\Edwin R\\USAddressExtract\\USAddressExtract\\R')
# source('ExtractAddressFields.R')
target.addr.new <- target.addr[, c('row_id', 'Address')]
target.addr.new$Zip             <- NA
target.addr.new$State           <- NA
target.addr.new$Nbr             <- NA
target.addr.new$St.Suf          <- NA
target.addr.new$St.Dr           <- NA
target.addr.new$St.Name         <- NA
target.addr.new$Unit.Suf        <- NA
target.addr.new$Unit            <- NA
target.addr.new$Process.Status  <- NA
for(i in 1:nrow(target.addr)){
x <- ExtractAddrressFields(target.addr$Address[i])
if(!is.null(x)){
target.addr.new$Zip[i]             <- x$Zip
target.addr.new$State[i]           <- x$State
target.addr.new$Nbr[i]             <- x$Nbr
target.addr.new$St.Suf[i]          <- x$St.Suf
target.addr.new$St.Dr[i]           <- x$St.Dr
target.addr.new$St.Name[i]         <- x$St.Name
target.addr.new$Unit.Suf[i]        <- x$Unit.Suf
target.addr.new$Unit[i]            <- x$Unit
target.addr.new$Process.Status[i]  <- x$Status
}
}
target.addr.new.missed <- target.addr.new %>% filter(Process.Status == 'Cannot find street suffix properly')
addr.database <- read.csv('EDW_Data.csv', header = TRUE)
names(addr.database) <- gsub('[^a-z]\\.\\.', "", x = names(addr.database) ) #getting rid of crazy naming
addr.database <- addr.database[grepl('Fannie Mae', addr.database$SellerName, ignore.case = TRUE),]
addr.database$ParsedAddress <- as.character(addr.database$ParsedAddress)
addr.database$ParsedSuite <- as.character(addr.database$ParsedSuite)
addr.database$SellerName <- as.character(addr.database$SellerName)
addr.database$AuctionStatus <- as.character(addr.database$AuctionStatus)
addr.database$AuctionDate <- as.Date(as.character(addr.database$AuctionDate), format = '%Y-%m-%d')
addr.database$PropertyState <- as.character(addr.database$PropertyState)
addr.database$Reserve <- as.numeric(as.character(addr.database$Reserve))
addr.database$ParsedCity <- as.character(addr.database$ParsedCity)
addr.database$new.zip[addr.database$ParsedZip <= 9999] <-
as.character(paste(0, addr.database$ParsedZip[addr.database$ParsedZip <= 9999] , sep=""))
addr.database$new.zip[addr.database$ParsedZip <= 999] <-
as.character(paste(0,0, addr.database$ParsedZip[addr.database$ParsedZip <= 999] , sep=""))
addr.database$new.zip[addr.database$ParsedZip > 9999] <- as.character((addr.database$ParsedZip[addr.database$ParsedZip > 9999]))
addr.database$Address <- paste(addr.database$ParsedAddress, addr.database$ParsedSuite, addr.database$PropertyState, addr.database$new.zip)
addr.database$Address <- gsub('\\s$', '', addr.database$Address) #Trim the end
View(addr.database)
target.addr.new.missed <- target.addr.new %>% filter(Process.Status == 'Cannot find street suffix properly')
addr.database <- read.csv('EDW_Data.csv', header = TRUE, na.strings = 'Unknown')
View(addr.database)
names(addr.database) <- gsub('[^a-z]\\.\\.', "", x = names(addr.database) ) #getting rid of crazy naming
addr.database <- addr.database[grepl('Fannie Mae', addr.database$SellerName, ignore.case = TRUE),]
addr.database$ParsedAddress <- as.character(addr.database$ParsedAddress)
addr.database$ParsedSuite <- as.character(addr.database$ParsedSuite)
addr.database$SellerName <- as.character(addr.database$SellerName)
addr.database$AuctionStatus <- as.character(addr.database$AuctionStatus)
addr.database$AuctionDate <- as.Date(as.character(addr.database$AuctionDate), format = '%Y-%m-%d')
addr.database$PropertyState <- as.character(addr.database$PropertyState)
addr.database$Reserve <- as.numeric(as.character(addr.database$Reserve))
addr.database$ParsedCity <- as.character(addr.database$ParsedCity)
addr.database$new.zip[addr.database$ParsedZip <= 9999] <-
as.character(paste(0, addr.database$ParsedZip[addr.database$ParsedZip <= 9999] , sep=""))
addr.database$new.zip[addr.database$ParsedZip <= 999] <-
as.character(paste(0,0, addr.database$ParsedZip[addr.database$ParsedZip <= 999] , sep=""))
addr.database$new.zip[addr.database$ParsedZip > 9999] <- as.character((addr.database$ParsedZip[addr.database$ParsedZip > 9999]))
addr.database$Address <- paste(addr.database$ParsedAddress, addr.database$ParsedSuite, addr.database$PropertyState, addr.database$new.zip)
addr.database$Address <- gsub('\\s$', '', addr.database$Address) #Trim the end
View(addr.database)
View(addr.database)
View(addr.database)
View(addr.database)
View(addr.database)
addr.database.new <- addr.database[, c('GlobalPropertyid', 'SystemAuctionid', 'Address', 'IsSold', 'Reserve', 'AuctionDate', 'AuctionStatus')]
View(addr.database)
View(addr.database)
addr.database.new <- addr.database[, c('GlobalPropertyid', 'SystemAuctionid')],
addr.database.new <- addr.database[, c('GlobalPropertyid', 'SystemAuctionid')]
View(addr.database)
addr.database.new <- addr.database[, c('GlobalPropertyId', 'SystemAuctionId', 'Address', 'IsSold', 'Reserve', 'AuctionDate', 'AuctionStatus')]
addr.database.new$Zip             <- NA
addr.database.new$State           <- NA
addr.database.new$Nbr             <- NA
addr.database.new$St.Suf          <- NA
addr.database.new$St.Dr           <- NA
addr.database.new$St.Name         <- NA
addr.database.new$Unit.Suf        <- NA
addr.database.new$Unit            <- NA
addr.database.new$Process.Status  <- NA
for(i in 1:nrow(addr.database.new)){
x <- ExtractAddrressFields(addr.database.new$Address[i])
if(!is.null(x)){
addr.database.new$Zip[i]             <- x$Zip
addr.database.new$State[i]           <- x$State
addr.database.new$Nbr[i]             <- x$Nbr
addr.database.new$St.Suf[i]          <- x$St.Suf
addr.database.new$St.Dr[i]           <- x$St.Dr
addr.database.new$St.Name[i]         <- x$St.Name
addr.database.new$Unit.Suf[i]        <- x$Unit.Suf
addr.database.new$Unit[i]            <- x$Unit
addr.database.new$Process.Status[i]  <- x$Status
}
}
View(addr.database.new)
table(addr.database.new$Process.Status)
i=1
addr.database.new$Zip[i] %in% target.addr.new$Zip
target.addr.new$Zip
addr.database.new$Zip[i]
addr.database.new$Zip[i] %in% target.addr.new$Zip
which(addr.database.new$Zip[i] %in% target.addr.new$Zip )
target.addr.new$Zip
addr.database.new$Zip[i]
out.set <- addr.database.new
out.set$match.row_id <- NA
start.time <- Sys.time()
for(i in 1:nrow(addr.database.new)){
k <- which((addr.database.new$Zip[i] %in% target.addr.new$Zip) &
(addr.database.new$Nbr[i] %in% target.addr.new$Nbr))
if(length(k) > 0){
out.set$match.row_id[i] <- toString(target.addr$row_id[k], sep = ',')
}
if(i %% 10 == 0 ){
current.time <- Sys.time()
elapsed <- round(as.numeric(difftime(current.time, start.time, units = "mins")), 1)
print(paste("Processed", i, "rows,", elapsed,  "minutes elapsed.", sep = " "))
}
}
View(out.set)
i
addr.database.new$Zip[i] %in% target.addr.new$Zip
out.set <- addr.database.new
out.set$match.row_id <- NA
start.time <- Sys.time()
for(i in 1:nrow(addr.database.new)){
k <- which((target.addr.new$Zip == addr.database.new$Zip[i]) &
(target.addr.new$Nb == addr.database.new$Nbr[i]))
if(length(k) > 0){
out.set$match.row_id[i] <- toString(target.addr$row_id[k], sep = ',')
}
if(i %% 10 == 0 ){
current.time <- Sys.time()
elapsed <- round(as.numeric(difftime(current.time, start.time, units = "mins")), 1)
print(paste("Processed", i, "rows,", elapsed,  "minutes elapsed.", sep = " "))
}
}
View(out.set)
out.set <- addr.database.new
out.set$match.row_id <- NA
start.time <- Sys.time()
for(i in 1:nrow(addr.database.new)){
k <- which((target.addr.new$Zip == addr.database.new$Zip[i]) &
(target.addr.new$Nb == addr.database.new$Nbr[i]) &
unlist(lapply(target.addr.new$St.Name, FUN = grepl, addr.database$St.Name[i], ignore.case = TRUE)))
if(length(k) > 0){
out.set$match.row_id[i] <- toString(target.addr$row_id[k], sep = ',')
}
if(i %% 10 == 0 ){
current.time <- Sys.time()
elapsed <- round(as.numeric(difftime(current.time, start.time, units = "mins")), 1)
print(paste("Processed", i, "rows,", elapsed,  "minutes elapsed.", sep = " "))
}
}
out.matched.set <- out.set %>% filter(!is.na(match.row_id))
View(out.set)
addr.database$St.Name[i]
addr.database.new
View(addr.database.new)
out.set <- addr.database.new
out.set$match.row_id <- NA
start.time <- Sys.time()
for(i in 1:nrow(addr.database.new)){
k <- which((target.addr.new$Zip == addr.database.new$Zip[i]) &
(target.addr.new$Nb == addr.database.new$Nbr[i]) &
(target.addr.new$St.Name == addr.database.new$St.Name[i]))
# unlist(lapply(target.addr.new$St.Name, FUN = grepl, addr.database.new$St.Name[i], ignore.case = TRUE)))
if(length(k) > 0){
out.set$match.row_id[i] <- toString(target.addr$row_id[k], sep = ',')
}
if(i %% 10 == 0 ){
current.time <- Sys.time()
elapsed <- round(as.numeric(difftime(current.time, start.time, units = "mins")), 1)
print(paste("Processed", i, "rows,", elapsed,  "minutes elapsed.", sep = " "))
}
}
out.matched.set <- out.set %>% filter(!is.na(match.row_id))
View(out.matched.set)
out.matched.unsold.set <- out.set %>% filter(!is.na(match.row_id) & IsSold == 0)
View(out.matched.unsold.set)
out.set <- addr.database.new
out.set$match.row_id <- NA
start.time <- Sys.time()
for(i in 1:nrow(addr.database.new)){
k <- which((target.addr.new$Zip == addr.database.new$Zip[i]) &
(target.addr.new$Nb == addr.database.new$Nbr[i]) &
# (target.addr.new$St.Name == addr.database.new$St.Name[i]))
unlist(lapply(target.addr.new$St.Name, FUN = grepl, addr.database.new$St.Name[i], ignore.case = TRUE)))
if(length(k) > 0){
out.set$match.row_id[i] <- toString(target.addr$row_id[k], sep = ',')
}
if(i %% 10 == 0 ){
current.time <- Sys.time()
elapsed <- round(as.numeric(difftime(current.time, start.time, units = "mins")), 1)
print(paste("Processed", i, "rows,", elapsed,  "minutes elapsed.", sep = " "))
}
}
out.matched.unsold.set <- out.set %>% filter(!is.na(match.row_id) & IsSold == 0)
View(out.matched.unsold.set)
?ExtractAddrressFields
setwd('C:\\Users\\Edwin\\Desktop\\Edwin(10-08-2012)\\Work\\Auction.com\\BayView Public Record Matching')
write.csv(x = addr.database.new, file = 'edw_test_data.csv')
write.csv(x = target.addr.new, file = 'test_data.csv')
setwd('C:\\Users\\Edwin\\Desktop\\Edwin(10-08-2012)\\Work\\Auction.com\\R\\AddressMatching')
setwd('C:\\Users\\Edwin\\Desktop\\Edwin(10-08-2012)\\Work\\Auction.com\\R\\AddressMatching')
target.data <- read.csv('test_data.csv')
head(target.data, n = 10)
target.data$Zip             <- NA
target.data$State           <- NA
target.data$Nbr             <- NA
target.data$St.Suf          <- NA
target.data$St.Dr           <- NA
target.data$St.Name         <- NA
target.data$Unit.Suf        <- NA
target.data$Unit            <- NA
target.data$Process.Status  <- NA
target.data$Address[i]
setwd('C:\\Users\\Edwin\\Desktop\\Edwin(10-08-2012)\\Work\\Auction.com\\R\\AddressMatching')
target.data <- read.csv('test_data.csv', colClasses = rep('character', 2)
setwd('C:\\Users\\Edwin\\Desktop\\Edwin(10-08-2012)\\Work\\Auction.com\\R\\AddressMatching')
target.data <- read.csv('test_data.csv', colClasses = rep('character', 2))
target.data
head(target.data, n = 10)
