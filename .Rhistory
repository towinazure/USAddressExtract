rm(list=ls())
library(dplyr)
setwd('C:\\Users\\Edwin\\Desktop\\Edwin(10-08-2012)\\Work\\Auction.com\\BayView Public Record Matching')
# rt.raw <- read.csv('rt_raw.csv',header=FALSE)
# rt.raw$V1 <- gsub("\\(", "", rt.raw$V1)
# rt.raw$V14 <- gsub("\\)", "", rt.raw$V14)
# names(rt.raw) <- c('Tran.Date', 'Sr.Prop.Id','Use.Code','Dis.Ind','Lndr.Name','Lndr.Type','Addr.Nbr',
#                    'Addr.Fr','Addr.Dir','Addr.St','Addr.St.Suf','Addr.City', 'Addr.Zip','Addr.State')
#
# head(rt.raw)
#
# rt.raw$Dis.Ind <- as.character(rt.raw$Dis.Ind)
# rt.raw$Lndr.Name <- as.character(rt.raw$Lndr.Name)
# rt.raw$Addr.Zip <- as.character(rt.raw$Addr.Zip)
# rt.raw$Addr.State <- as.character(rt.raw$Addr.State)
# rt.raw$Addr.Nbr <- as.character(rt.raw$Addr.Nbr)
# rt.raw$Addr.Dir  <- as.character(rt.raw$Addr.Dir )
# rt.raw$Addr.St <- as.character(rt.raw$Addr.St)
# rt.raw$Addr.St.Suf <- as.character(rt.raw$Addr.St.Suf)
#
# rt.raw <- subset(rt.raw, Addr.Nbr  != "")
# rt.raw <- subset(rt.raw, Addr.St   != "")
# # rt.raw <- subset(rt.raw, Lndr.Name != "")
# rt.raw <- subset(rt.raw, Addr.Zip != "")
# rt.raw <- rt.raw[nchar(rt.raw$Addr.St) > 1, ]
# # rt.raw <- rt.raw[grepl("^R+.*", rt.raw$Use.Code) | rt.raw$Use.Code == '', ]
target.addr <- read.csv('FannieMae.csv')
target.addr$new.zip[target.addr$zip <= 9999] <-
as.character(paste(0, target.addr$zip[target.addr$zip <= 9999] , sep=""))
target.addr$new.zip[target.addr$zip <= 999] <-
as.character(paste(0,0, target.addr$zip[target.addr$zip <= 999] , sep=""))
target.addr$new.zip[target.addr$zip > 9999] <- as.character((target.addr$zip[target.addr$zip > 9999]))
target.addr$state <- as.character(target.addr$state)
target.addr$county <- as.character(target.addr$county)
target.addr$county <- gsub('\\n','', target.addr$county)
target.addr$city <- as.character(target.addr$city)
target.addr$street <- as.character(target.addr$street)
target.addr$street <- gsub('\\n','', target.addr$street)
target.addr$property.type <- as.character(target.addr$property.type)
target.addr$property.type <- gsub('\\n','', target.addr$property.type)
target.addr$Address <- paste(target.addr$street,  target.addr$state, target.addr$new.zip)
target.addr$Address <- gsub('\\s$', '', target.addr$Address) #Trim the end
target.addr$Address
nchar(target.addr$zip)
rm(list=ls())
library(dplyr)
setwd('C:\\Users\\Edwin\\Desktop\\Edwin(10-08-2012)\\Work\\Auction.com\\BayView Public Record Matching')
# rt.raw <- read.csv('rt_raw.csv',header=FALSE)
# rt.raw$V1 <- gsub("\\(", "", rt.raw$V1)
# rt.raw$V14 <- gsub("\\)", "", rt.raw$V14)
# names(rt.raw) <- c('Tran.Date', 'Sr.Prop.Id','Use.Code','Dis.Ind','Lndr.Name','Lndr.Type','Addr.Nbr',
#                    'Addr.Fr','Addr.Dir','Addr.St','Addr.St.Suf','Addr.City', 'Addr.Zip','Addr.State')
#
# head(rt.raw)
#
# rt.raw$Dis.Ind <- as.character(rt.raw$Dis.Ind)
# rt.raw$Lndr.Name <- as.character(rt.raw$Lndr.Name)
# rt.raw$Addr.Zip <- as.character(rt.raw$Addr.Zip)
# rt.raw$Addr.State <- as.character(rt.raw$Addr.State)
# rt.raw$Addr.Nbr <- as.character(rt.raw$Addr.Nbr)
# rt.raw$Addr.Dir  <- as.character(rt.raw$Addr.Dir )
# rt.raw$Addr.St <- as.character(rt.raw$Addr.St)
# rt.raw$Addr.St.Suf <- as.character(rt.raw$Addr.St.Suf)
#
# rt.raw <- subset(rt.raw, Addr.Nbr  != "")
# rt.raw <- subset(rt.raw, Addr.St   != "")
# # rt.raw <- subset(rt.raw, Lndr.Name != "")
# rt.raw <- subset(rt.raw, Addr.Zip != "")
# rt.raw <- rt.raw[nchar(rt.raw$Addr.St) > 1, ]
# # rt.raw <- rt.raw[grepl("^R+.*", rt.raw$Use.Code) | rt.raw$Use.Code == '', ]
target.addr <- read.csv('FannieMae.csv')
zero.to.fill <- 5 - nchar(target.addr$zip)
target.addr$new.zip <- paste(rep(0, zero.to.fill), target.addr$zip, sep = "")
zero.to.fill
target.addr <- read.csv('FannieMae.csv')
target.addr$new.zip <- NA
zero.to.fill <- 5 - nchar(target.addr$zip)
for(i in 1:nrow(target.addr)){
if(zero.to.fill[i] > 0){
target.addr$new.zip[i] <- paste(rep(0, zero.to.fill[i]), target.addr$zip[i], sep = "")
}
}
View(target.addr)
target.addr <- read.csv('FannieMae.csv')
target.addr$new.zip <- NA
zero.to.fill <- 5 - nchar(target.addr$zip)
for(i in 1:nrow(target.addr)){
if(zero.to.fill[i] > 0){
target.addr$new.zip[i] <- paste(rep(0, zero.to.fill[i]), target.addr$zip[i], sep = "")
}else{
target.addr$new.zip[i] <- target.addr$zip[i]
}
}
View(target.addr)
target.addr <- read.csv('FannieMae.csv')
target.addr$new.zip <- NA
zero.to.fill <- 5 - nchar(target.addr$zip)
for(i in 1:nrow(target.addr)){
if(zero.to.fill[i] > 0){
target.addr$new.zip[i] <- paste(rep(0, zero.to.fill[i]), target.addr$zip[i], sep = "")
}else{
target.addr$new.zip[i] <- as.character(target.addr$zip[i])
}
}
View(target.addr)
target.addr$state <- as.character(target.addr$state)
target.addr$county <- as.character(target.addr$county)
target.addr$county <- gsub('\\n','', target.addr$county)
target.addr$city <- as.character(target.addr$city)
target.addr$street <- as.character(target.addr$street)
target.addr$street <- gsub('\\n','', target.addr$street)
target.addr$Address <- paste(target.addr$street,  target.addr$state, target.addr$new.zip)
target.addr$Address <- gsub('\\s$', '', target.addr$Address) #Trim the end
target.addr$Zip <- NA
target.addr$Nbr <- NA
target.addr$St.Name <- NA
target.addr$St.Dr <- NA
target.addr$St.Suf <- NA
target.addr$Unit <- NA
setwd('C:\\Users\\Edwin\\Desktop\\Edwin(10-08-2012)\\Work\\Edwin R\\USAddressExtract\\USAddressExtract\\R')
setwd('C:\\Users\\Edwin\\Desktop\\Edwin(10-08-2012)\\Work\\Edwin R\\USAddressExtract\\USAddressExtract\\R')
source('ExtractAddressFields.R')
setwd('C:\\Users\\Edwin\\Desktop\\Edwin(10-08-2012)\\Work\\Edwin R\\USAddressExtract\\USAddressExtract\\R')
source('ExtractAddressFields.R')
address.string <- target.addr$Address[i]
ExtractAddrressFields(address.string)
split(address.string, c('', ','))
?split
strsplit(address.string, c('', ','))
strsplit(address.string, c(' ', ','))
split.string <- unlist(strsplit(address.string, c(' ', ',')))
split.string
View(target.addr)
string.pool <- unlist(strsplit(address.string, c(' ', ',')))
string.pool[length(string.pool)]
gregexpr('([0-9]{5,5})$', string.pool[(length(string.pool)-1):length(string.pool)])
string.pool[(length(string.pool)-1):length(string.pool)]
grepl('([0-9]{5,5})$', string.pool[(length(string.pool)-1):length(string.pool)])
which(grepl('([0-9]{5,5})$', string.pool[(length(string.pool)-1):length(string.pool)]))
which(grepl('([0-9]{5,5})$', string.pool[(length(string.pool)-1):length(string.pool)]))
length(string.pool) + which(grepl('([0-9]{5,5})$', string.pool[(length(string.pool)-1):length(string.pool)])) - 1
length(string.pool)
length(string.pool) + which(grepl('([0-9]{5,5})$', string.pool[(length(string.pool)-1):length(string.pool)])) - 1
which(grepl('([0-9]{5,5})$', string.pool[(length(string.pool)-1):length(string.pool)]))
string.pool
length(string.pool) + which(grepl('([0-9]{5,5})$', string.pool[(length(string.pool)-1):length(string.pool)]))
length(string.pool) + which(grepl('([0-9]{5,5})$', string.pool[(length(string.pool)-1):length(string.pool)])) - 2
string.pool <- unlist(strsplit(address.string, c(' ', ',')))
zip.pos <- length(string.pool) + which(grepl('([0-9]{5,5})$', string.pool[(length(string.pool)-1):length(string.pool)])) - 2
if(zip.pos > 0){
string.pool <- string.pool[-1 * zip.pos]
}
string.pool
string.pool <- unlist(strsplit(address.string, c(' ', ',')))
zip.pos   <- length(string.pool) + which(grepl('^([0-9]{5,5})$', string.pool[(length(string.pool)-1):length(string.pool)])) - 2
zip.pos
state.pos <- length(string.pool) + which(grepl('^([A-Za-z]{2,2})$', string.pool[(length(string.pool)-1):length(string.pool)])) - 2
state.pos
Zip <-  string.pool[zip.pos]
State <-  string.pool[state.pos]
Zip
State
string.pool <- string.pool[-1 * c(state.pos, zip.pos)]
string.pool
string.pool <- unlist(strsplit(address.string, c(' ', ',')))
string.pool <- toupper(string.pool)
string.pool
string.pool <- unlist(strsplit(address.string, c(' ', ',')))
string.pool <- toupper(string.pool)
zip.pos   <- length(string.pool) + which(grepl('^([0-9]{5,5})$', string.pool[(length(string.pool)-1):length(string.pool)])) - 2
state.pos <- length(string.pool) + which(grepl('^([A-Z]{2,2})$', string.pool[(length(string.pool)-1):length(string.pool)])) - 2
if(zip.pos > 0 | state.pos){
Zip   <-  string.pool[zip.pos]
State <-  string.pool[state.pos]
string.pool <- string.pool[-1 * c(state.pos, zip.pos)]
}
state.pos
zip.pos
string.pool
Zip
State
- which(grepl('^([0-9]$', string.pool[1]))
which(grepl('^([0-9]$', string.pool[1]))
string.pool[1]
which(grepl('^[0-9]$', string.pool[1]))
grepl('^[0-9]$', string.pool[1])
Nbr <- which(grepl('^[0-9]+', string.pool[1]))
Nbr
Nbr.pos <- which(grepl('^[0-9]+', string.pool[1]))
if(Nbr.pos > 0){
Nbr   <-  string.pool[Nbr.pos]
string.pool <- string.pool[-1 * Nbr.pos]
}else{
print('Cannot find Street Number')
return(NULL)
}
Nbr
string.pool
which(grepl('^(Apt)|(Unit))$', string.pool, ignore.case = TRUE))
string.pool
which(grepl('^((Apt)|(Unit))$', string.pool, ignore.case = TRUE))
Unit.Suf.pos <- which(grepl('^((Apt)|(Unit))$', string.pool, ignore.case = TRUE))
if(Unit.Suf.pos > 0 & Unit.Suf.pos < length(string.pool)){
Unit.Suf <- string.pool[Unit.Suf.pos]
Unit     <- string.pool[Unit.Suf.pos + 1]
}
Unit.Suf
Unit
Unit.Suf.pos <- which(grepl('^((Apt)|(Unit))$', string.pool, ignore.case = TRUE))
if(Unit.Suf.pos > 0 & Unit.Suf.pos < length(string.pool)){
Unit.Suf <- string.pool[Unit.Suf.pos]
Unit     <- string.pool[Unit.Suf.pos + 1]
string.pool <- string.pool[-1 * c(Unit.Suf.pos, Unit.Suf.pos + 1)]
}
string.pool
street.suf.keywords <- read.csv('data/StreetSuffix.csv')
setwd('C:\\Users\\Edwin\\Desktop\\Edwin(10-08-2012)\\Work\\Edwin R\\USAddressExtract\\USAddressExtract\\R')
street.suf.keywords <- read.csv('data/StreetSuffix.csv')
street.suf.keywords <- read.csv('data\\StreetSuffix.csv')
read.csv('data\\StreetSuffix.csv')
street.suf.keywords <- read.csv('data\\StreetSuffix.csv')
street.suf.keywords <- read.csv('data\\StreetSuffix.csv')
setwd('C:\\Users\\Edwin\\Desktop\\Edwin(10-08-2012)\\Work\\Edwin R\\USAddressExtract\\USAddressExtract')
street.suf.keywords <- read.csv('data\\StreetSuffix.csv')
street.suf.keywords
street.suf.keywords$Name
street.suf.keywords <- read.csv('data\\StreetSuffix.csv', rep('character', 2))
?read.csv
street.suf.keywords <- read.csv('data\\StreetSuffix.csv', header = TRUE, colClasses = rep('character', 2))
street.suf.keywords
street.suf.keywords$Name
St.Suf.pos <- which(string.pool %in% c(street.suf.keywords$Name, street.suf.keywords$Suffix))
St.Suf.pos
string.pool
string.pool <- unlist(strsplit(address.string, c(' ', ',')))
string.pool <- gsub('\\.', '', string.pool)
string.pool
street_suf_keywords <- read.csv('data\\StreetSuffix.csv', header = TRUE, colClasses = rep('character', 2))
street_direction_keywords <- c('East','South', 'West', 'North', 'E', 'S', 'W', 'N', 'NW', 'NE', 'SW', 'SE')
street_direction_keywords
?build
street_suf_keywords <- read.csv('data\\StreetSuffix.csv', header = TRUE, colClasses = rep('character', 2))
street_direction_keywords <- c('East','South', 'West', 'North', 'E', 'S', 'W', 'N', 'NW', 'NE', 'SW', 'SE')
string.pool <- unlist(strsplit(address.string, c(' ', ',')))
string.pool <- gsub('\\.', '', string.pool)
string.pool <- toupper(string.pool)
Zip      <- NA
State    <- NA
Nbr      <- NA
St.Suf   <- NA
St.Dr    <- NA
St.Name  <- NA
Unit.Suf <- NA
Unit     <- NA
Zip.pos   <- length(string.pool) + which(grepl('^([0-9]{5,5})$', string.pool[(length(string.pool)-1):length(string.pool)])) - 2
State.pos <- length(string.pool) + which(grepl('^([A-Z]{2,2})$', string.pool[(length(string.pool)-1):length(string.pool)])) - 2
if(Zip.pos > 0 | State.pos > 0){
Zip   <-  string.pool[Zip.pos]
State <-  string.pool[State.pos]
string.pool <- string.pool[-1 * c(State.pos, Zip.pos)]
}else{
print('Cannot find Zip and State')
return(NULL)
}
Nbr.pos <- which(grepl('^[0-9]+', string.pool[1]))
if(Nbr.pos > 0){
Nbr   <-  string.pool[Nbr.pos]
string.pool <- string.pool[-1 * Nbr.pos]
}else{
print('Cannot find Street Number')
return(NULL)
}
Unit.Suf.pos <- which(grepl('^((Apt)|(Unit))$', string.pool, ignore.case = TRUE))
if(Unit.Suf.pos > 0 & Unit.Suf.pos < length(string.pool)){
Unit.pos <- (Unit.Suf.pos + 1) : length(string.pool)
Unit.Suf <- string.pool[Unit.Suf.pos]
Unit     <- string.pool[Unit.pos]
string.pool <- string.pool[-1 * Unit.pos]
}
St.Suf.pos <- max(which(string.pool %in% c(street_suf_keywords$Name, street_suf_keywords$Suffix)))
St.Suf.pos
St.Suf <- string.pool[St.Suf.pos]
string.pool <- string.pool[-St.Suf.pos]
St.Suf
St.Dr.pos <- which(string.pool %in% street_direction_keywords)
St.Dr.pos
street_direction_keywords
St.Name <- paste(string.pool, sep = ' ')
St.Name
St.Name <- paste(string.pool, sep = ' ')
St.Name
paste(string.pool, sep = ' ', collapse = TRUE)
paste(string.pool, sep = ' ', collapse = ' ')
string.pool <- string.pool[-1 * c(Unit.Suf.pos, Unit.pos)]
string.pool
c(Unit.Suf.pos, Unit.pos)
street_suf_keywords <- read.csv('data\\StreetSuffix.csv', header = TRUE, colClasses = rep('character', 2))
street_direction_keywords <- c('East','South', 'West', 'North', 'E', 'S', 'W', 'N', 'NW', 'NE', 'SW', 'SE')
string.pool <- unlist(strsplit(address.string, c(' ', ',')))
string.pool <- gsub('\\.', '', string.pool)
string.pool <- toupper(string.pool)
Zip      <- NA
State    <- NA
Nbr      <- NA
St.Suf   <- NA
St.Dr    <- NA
St.Name  <- NA
Unit.Suf <- NA
Unit     <- NA
Zip.pos   <- length(string.pool) + which(grepl('^([0-9]{5,5})$', string.pool[(length(string.pool)-1):length(string.pool)])) - 2
State.pos <- length(string.pool) + which(grepl('^([A-Z]{2,2})$', string.pool[(length(string.pool)-1):length(string.pool)])) - 2
if(Zip.pos > 0 | State.pos > 0){
Zip   <-  string.pool[Zip.pos]
State <-  string.pool[State.pos]
string.pool <- string.pool[-1 * c(State.pos, Zip.pos)]
}else{
print('Cannot find Zip and State')
return(NULL)
}
Nbr.pos <- which(grepl('^[0-9]+', string.pool[1]))
if(Nbr.pos > 0){
Nbr   <-  string.pool[Nbr.pos]
string.pool <- string.pool[-1 * Nbr.pos]
}else{
print('Cannot find Street Number')
return(NULL)
}
Unit.Suf.pos <- which(grepl('^((Apt)|(Unit))$', string.pool, ignore.case = TRUE))
if(Unit.Suf.pos > 0 & Unit.Suf.pos < length(string.pool)){
Unit.pos <- (Unit.Suf.pos + 1) : length(string.pool)
Unit.Suf <- string.pool[Unit.Suf.pos]
Unit     <- string.pool[Unit.pos]
string.pool <- string.pool[-1 * c(Unit.Suf.pos, Unit.pos)]
}
St.Suf.pos <- max(which(string.pool %in% c(street_suf_keywords$Name, street_suf_keywords$Suffix)))
if(St.Suf.pos == length(string.pool)){
St.Suf <- string.pool[St.Suf.pos]
string.pool <- string.pool[-St.Suf.pos]
St.Dr.pos <- which(string.pool %in% street_direction_keywords)
if(St.Dr.pos > 0){
St.Dr <- string.pool[St.Dr.pos]
string.pool <- string.pool[-St.Suf.pos]
}
St.Name <- paste(string.pool, sep = ' ', collapse = ' ')
}
St.Name
St.Suf.pos
St.Suf
string.pool
string.pool
St.Name <- paste(string.pool, sep = ' ', collapse = ' ')
St.Name
address_obj <- list(Zip = Zip,
State    = State,
Nbr      = Nbr,
St.Suf   = St.Suf,
St.Dr    = St.Dr,
St.Name  = St.Name,
Unit.Suf = Unit.Suf,
Unit     = Unit)
address_obj
address_obj
address_obj
setwd('C:\\Users\\Edwin\\Desktop\\Edwin(10-08-2012)\\Work\\Edwin R\\USAddressExtract\\USAddressExtract\\R')
source('ExtractAddressFields.R')
address.string <- target.addr$Address[i]
ExtractAddrressFields(address.string)
build USAddressExtract
build 'C:\\Users\\Edwin\\Desktop\\Edwin(10-08-2012)\\Work\\Edwin R\\USAddressExtract\\USAddressExtract\'
''
build 'C:\\Users\\Edwin\\Desktop\\Edwin(10-08-2012)\\Work\\Edwin R\\USAddressExtract\\USAddressExtract'
?build
check()
?check
check
library(USAddressExtract)
install.packages("Rtools")
